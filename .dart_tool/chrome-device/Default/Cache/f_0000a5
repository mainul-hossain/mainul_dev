define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter_svg/src/picture_stream.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter_svg/src/utilities/_http_web.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter_svg/src/picture_cache.dart'], (function load__packages__flutter_svg__src__picture_provider_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter_svg__src__picture_stream$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter_svg__src__utilities___http_web$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter_svg__src__picture_cache$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const io = dart_sdk.io;
  const _engine = dart_sdk._engine;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const picture_stream = packages__flutter_svg__src__picture_stream$46dart.src__picture_stream;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const _http_web = packages__flutter_svg__src__utilities___http_web$46dart.src__utilities___http_web;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const localizations = packages__flutter__src__widgets__widget_span$46dart.src__widgets__localizations;
  const picture_cache = packages__flutter_svg__src__picture_cache$46dart.src__picture_cache;
  var picture_provider = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $isEmpty = dartx.isEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    PictureConfigurationL: () => (T$.PictureConfigurationL = dart.constFn(dart.legacy(picture_provider.PictureConfiguration)))(),
    PictureStreamCompleterL: () => (T$.PictureStreamCompleterL = dart.constFn(dart.legacy(picture_stream.PictureStreamCompleter)))(),
    VoidToPictureStreamCompleterL: () => (T$.VoidToPictureStreamCompleterL = dart.constFn(dart.fnType(T$.PictureStreamCompleterL(), [])))(),
    PictureProviderL: () => (T$.PictureProviderL = dart.constFn(dart.legacy(picture_provider.PictureProvider)))(),
    DiagnosticsPropertyOfPictureProviderL: () => (T$.DiagnosticsPropertyOfPictureProviderL = dart.constFn(diagnostics.DiagnosticsProperty$(T$.PictureProviderL())))(),
    DiagnosticsNodeL: () => (T$.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))(),
    SyncIterableOfDiagnosticsNodeL: () => (T$.SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(T$.DiagnosticsNodeL())))(),
    IterableOfDiagnosticsNodeL: () => (T$.IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(T$.DiagnosticsNodeL())))(),
    IterableLOfDiagnosticsNodeL: () => (T$.IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(T$.IterableOfDiagnosticsNodeL())))(),
    VoidToIterableLOfDiagnosticsNodeL: () => (T$.VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(T$.IterableLOfDiagnosticsNodeL(), [])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T$.FutureLOfNull = dart.constFn(dart.legacy(T$.FutureOfNull())))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    dynamicAndStackTraceLToFutureLOfNull: () => (T$.dynamicAndStackTraceLToFutureLOfNull = dart.constFn(dart.fnType(T$.FutureLOfNull(), [dart.dynamic, T$.StackTraceL()])))(),
    AssetBundlePictureKeyL: () => (T$.AssetBundlePictureKeyL = dart.constFn(dart.legacy(picture_provider.AssetBundlePictureKey)))(),
    DiagnosticsPropertyOfAssetBundlePictureKeyL: () => (T$.DiagnosticsPropertyOfAssetBundlePictureKeyL = dart.constFn(diagnostics.DiagnosticsProperty$(T$.AssetBundlePictureKeyL())))(),
    PictureInfoL: () => (T$.PictureInfoL = dart.constFn(dart.legacy(picture_stream.PictureInfo)))(),
    NetworkPictureL: () => (T$.NetworkPictureL = dart.constFn(dart.legacy(picture_provider.NetworkPicture)))(),
    SynchronousFutureOfNetworkPictureL: () => (T$.SynchronousFutureOfNetworkPictureL = dart.constFn(synchronous_future.SynchronousFuture$(T$.NetworkPictureL())))(),
    DiagnosticsPropertyOfNetworkPictureL: () => (T$.DiagnosticsPropertyOfNetworkPictureL = dart.constFn(diagnostics.DiagnosticsProperty$(T$.NetworkPictureL())))(),
    FilePictureL: () => (T$.FilePictureL = dart.constFn(dart.legacy(picture_provider.FilePicture)))(),
    SynchronousFutureOfFilePictureL: () => (T$.SynchronousFutureOfFilePictureL = dart.constFn(synchronous_future.SynchronousFuture$(T$.FilePictureL())))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    DiagnosticsPropertyOfStringL: () => (T$.DiagnosticsPropertyOfStringL = dart.constFn(diagnostics.DiagnosticsProperty$(T$.StringL())))(),
    MemoryPictureL: () => (T$.MemoryPictureL = dart.constFn(dart.legacy(picture_provider.MemoryPicture)))(),
    SynchronousFutureOfMemoryPictureL: () => (T$.SynchronousFutureOfMemoryPictureL = dart.constFn(synchronous_future.SynchronousFuture$(T$.MemoryPictureL())))(),
    StringPictureL: () => (T$.StringPictureL = dart.constFn(dart.legacy(picture_provider.StringPicture)))(),
    SynchronousFutureOfStringPictureL: () => (T$.SynchronousFutureOfStringPictureL = dart.constFn(synchronous_future.SynchronousFuture$(T$.StringPictureL())))(),
    SynchronousFutureOfAssetBundlePictureKeyL: () => (T$.SynchronousFutureOfAssetBundlePictureKeyL = dart.constFn(synchronous_future.SynchronousFuture$(T$.AssetBundlePictureKeyL())))(),
    ExactAssetPictureL: () => (T$.ExactAssetPictureL = dart.constFn(dart.legacy(picture_provider.ExactAssetPicture)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: picture_provider.PictureConfiguration.prototype,
        [colorFilter$]: null,
        [platform$]: null,
        [viewBox$]: null,
        [textDirection$]: null,
        [locale$]: null,
        [bundle$]: null
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:flutter_svg/src/picture_provider.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_svg-0.19.3/lib/src/picture_provider.dart"
  ];
  var bundle$ = dart.privateName(picture_provider, "PictureConfiguration.bundle");
  var locale$ = dart.privateName(picture_provider, "PictureConfiguration.locale");
  var textDirection$ = dart.privateName(picture_provider, "PictureConfiguration.textDirection");
  var viewBox$ = dart.privateName(picture_provider, "PictureConfiguration.viewBox");
  var platform$ = dart.privateName(picture_provider, "PictureConfiguration.platform");
  var colorFilter$ = dart.privateName(picture_provider, "PictureConfiguration.colorFilter");
  picture_provider.PictureConfiguration = class PictureConfiguration extends core.Object {
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get viewBox() {
      return this[viewBox$];
    }
    set viewBox(value) {
      super.viewBox = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    get colorFilter() {
      return this[colorFilter$];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.PictureConfiguration.new({bundle: (t0 = bundle, t0 == null ? this.bundle : t0), locale: (t0$ = locale, t0$ == null ? this.locale : t0$), textDirection: (t0$0 = textDirection, t0$0 == null ? this.textDirection : t0$0), viewBox: (t0$1 = viewBox, t0$1 == null ? this.viewBox : t0$1), platform: (t0$2 = platform, t0$2 == null ? this.platform : t0$2), colorFilter: (t0$3 = colorFilter, t0$3 == null ? this.colorFilter : t0$3)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.PictureConfigurationL().is(other) && dart.equals(other.bundle, this.bundle) && dart.equals(other.locale, this.locale) && other.textDirection == this.textDirection && dart.equals(other.viewBox, this.viewBox) && other.platform == this.platform && dart.equals(other.colorFilter, this.colorFilter);
    }
    get hashCode() {
      return ui.hashValues(this.bundle, this.locale, this.viewBox, this.platform, this.colorFilter);
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("PictureConfiguration(");
      let hasArguments = false;
      if (this.bundle != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("bundle: " + dart.str(this.bundle));
        hasArguments = true;
      }
      if (this.locale != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("locale: " + dart.str(this.locale));
        hasArguments = true;
      }
      if (this.textDirection != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("textDirection: " + dart.str(this.textDirection));
        hasArguments = true;
      }
      if (this.viewBox != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("viewBox: " + dart.str(this.viewBox));
        hasArguments = true;
      }
      if (this.platform != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("platform: " + dart.str(diagnostics.describeEnum(this.platform)));
        hasArguments = true;
      }
      if (this.colorFilter != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("colorFilter: " + dart.str(this.colorFilter));
        hasArguments = true;
      }
      result.write(")");
      return result.toString();
    }
  };
  (picture_provider.PictureConfiguration.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[bundle$] = bundle;
    this[locale$] = locale;
    this[textDirection$] = textDirection;
    this[viewBox$] = viewBox;
    this[platform$] = platform;
    this[colorFilter$] = colorFilter;
    ;
  }).prototype = picture_provider.PictureConfiguration.prototype;
  dart.addTypeTests(picture_provider.PictureConfiguration);
  dart.addTypeCaches(picture_provider.PictureConfiguration);
  dart.setMethodSignature(picture_provider.PictureConfiguration, () => ({
    __proto__: dart.getMethods(picture_provider.PictureConfiguration.__proto__),
    copyWith: dart.fnType(dart.legacy(picture_provider.PictureConfiguration), [], {bundle: dart.legacy(asset_bundle.AssetBundle), colorFilter: dart.legacy(ui.ColorFilter), locale: dart.legacy(ui.Locale), platform: dart.legacy(platform.TargetPlatform), textDirection: dart.legacy(ui.TextDirection), viewBox: dart.legacy(ui.Rect)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(picture_provider.PictureConfiguration, () => ({
    __proto__: dart.getGetters(picture_provider.PictureConfiguration.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.PictureConfiguration, I[0]);
  dart.setFieldSignature(picture_provider.PictureConfiguration, () => ({
    __proto__: dart.getFields(picture_provider.PictureConfiguration.__proto__),
    bundle: dart.finalFieldType(dart.legacy(asset_bundle.AssetBundle)),
    locale: dart.finalFieldType(dart.legacy(ui.Locale)),
    textDirection: dart.finalFieldType(dart.legacy(ui.TextDirection)),
    viewBox: dart.finalFieldType(dart.legacy(ui.Rect)),
    platform: dart.finalFieldType(dart.legacy(platform.TargetPlatform)),
    colorFilter: dart.finalFieldType(dart.legacy(ui.ColorFilter))
  }));
  dart.defineExtensionMethods(picture_provider.PictureConfiguration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.PictureConfiguration, ['hashCode']);
  dart.defineLazy(picture_provider.PictureConfiguration, {
    /*picture_provider.PictureConfiguration.empty*/get empty() {
      return C[0] || CT.C0;
    }
  }, true);
  var colorFilter$0 = dart.privateName(picture_provider, "PictureProvider.colorFilter");
  const _is_PictureProvider_default = Symbol('_is_PictureProvider_default');
  picture_provider.PictureProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLToNull = () => (TLToNull = dart.constFn(dart.fnType(core.Null, [TL()])))();
    var DiagnosticsPropertyOfTL = () => (DiagnosticsPropertyOfTL = dart.constFn(diagnostics.DiagnosticsProperty$(TL())))();
    class PictureProvider extends core.Object {
      get colorFilter() {
        return this[colorFilter$0];
      }
      set colorFilter(value) {
        super.colorFilter = value;
      }
      static get cacheCount() {
        return picture_provider._cache.count;
      }
      static clearCache() {
        return picture_provider._cache.clear();
      }
      resolve(picture, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        if (!(picture != null)) dart.assertFailed(null, I[1], 328, 12, "picture != null");
        let stream = new picture_stream.PictureStream.new();
        let obtainedKey = null;
        this.obtainKey(picture).then(dart.void, dart.fn(key => {
          obtainedKey = key;
          stream.setCompleter(picture_provider._cache.putIfAbsent(key, dart.fn(() => this.load(key, {onError: onError}), T$.VoidToPictureStreamCompleterL())));
        }, TLToNull())).catchError(dart.fn((exception, stack) => async.async(core.Null, (function*() {
          if (onError != null) {
            onError(exception, stack);
            return null;
          }
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "SVG", context: new assertions.ErrorDescription.new("while resolving a picture"), silent: true, informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNodeL()).new((function*() {
              yield new (T$.DiagnosticsPropertyOfPictureProviderL()).new("Picture provider", this);
              yield new (DiagnosticsPropertyOfTL()).new("Picture key", obtainedKey, {defaultValue: null});
            }).bind(this)), T$.VoidToIterableLOfDiagnosticsNodeL())}));
          return null;
        }).bind(this)), T$.dynamicAndStackTraceLToFutureLOfNull()));
        return stream;
      }
      toString() {
        return dart.str(this.runtimeType) + "()";
      }
    }
    (PictureProvider.new = function(colorFilter) {
      this[colorFilter$0] = colorFilter;
      ;
    }).prototype = PictureProvider.prototype;
    dart.addTypeTests(PictureProvider);
    PictureProvider.prototype[_is_PictureProvider_default] = true;
    dart.addTypeCaches(PictureProvider);
    dart.setMethodSignature(PictureProvider, () => ({
      __proto__: dart.getMethods(PictureProvider.__proto__),
      resolve: dart.fnType(dart.legacy(picture_stream.PictureStream), [dart.legacy(picture_provider.PictureConfiguration)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setLibraryUri(PictureProvider, I[0]);
    dart.setFieldSignature(PictureProvider, () => ({
      __proto__: dart.getFields(PictureProvider.__proto__),
      colorFilter: dart.finalFieldType(dart.legacy(ui.ColorFilter))
    }));
    dart.defineExtensionMethods(PictureProvider, ['toString']);
    return PictureProvider;
  });
  picture_provider.PictureProvider = picture_provider.PictureProvider$();
  dart.addTypeTests(picture_provider.PictureProvider, _is_PictureProvider_default);
  var bundle$0 = dart.privateName(picture_provider, "AssetBundlePictureKey.bundle");
  var name$ = dart.privateName(picture_provider, "AssetBundlePictureKey.name");
  var colorFilter$1 = dart.privateName(picture_provider, "AssetBundlePictureKey.colorFilter");
  picture_provider.AssetBundlePictureKey = class AssetBundlePictureKey extends core.Object {
    get bundle() {
      return this[bundle$0];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get colorFilter() {
      return this[colorFilter$1];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.AssetBundlePictureKeyL().is(other) && dart.equals(this.bundle, other.bundle) && this.name == other.name && dart.equals(this.colorFilter, other.colorFilter);
    }
    get hashCode() {
      return ui.hashValues(this.bundle, this.name, this.colorFilter);
    }
    toString() {
      return dart.str(this.runtimeType) + "(bundle: " + dart.str(this.bundle) + ", name: \"" + dart.str(this.name) + "\", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.AssetBundlePictureKey.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[bundle$0] = bundle;
    this[name$] = name;
    this[colorFilter$1] = colorFilter;
    if (!(bundle != null)) dart.assertFailed(null, I[1], 391, 16, "bundle != null");
    if (!(name != null)) dart.assertFailed(null, I[1], 392, 16, "name != null");
    ;
  }).prototype = picture_provider.AssetBundlePictureKey.prototype;
  dart.addTypeTests(picture_provider.AssetBundlePictureKey);
  dart.addTypeCaches(picture_provider.AssetBundlePictureKey);
  dart.setMethodSignature(picture_provider.AssetBundlePictureKey, () => ({
    __proto__: dart.getMethods(picture_provider.AssetBundlePictureKey.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(picture_provider.AssetBundlePictureKey, () => ({
    __proto__: dart.getGetters(picture_provider.AssetBundlePictureKey.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.AssetBundlePictureKey, I[0]);
  dart.setFieldSignature(picture_provider.AssetBundlePictureKey, () => ({
    __proto__: dart.getFields(picture_provider.AssetBundlePictureKey.__proto__),
    bundle: dart.finalFieldType(dart.legacy(asset_bundle.AssetBundle)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    colorFilter: dart.finalFieldType(dart.legacy(ui.ColorFilter))
  }));
  dart.defineExtensionMethods(picture_provider.AssetBundlePictureKey, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.AssetBundlePictureKey, ['hashCode']);
  var decoder$ = dart.privateName(picture_provider, "AssetBundlePictureProvider.decoder");
  var _loadAsync = dart.privateName(picture_provider, "_loadAsync");
  picture_provider.AssetBundlePictureProvider = class AssetBundlePictureProvider extends picture_provider.PictureProvider$(dart.legacy(picture_provider.AssetBundlePictureKey)) {
    get decoder() {
      return this[decoder$];
    }
    set decoder(value) {
      super.decoder = value;
    }
    load(key, opts) {
      T$.AssetBundlePictureKeyL().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, onError), {informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNodeL()).new((function*() {
          yield new (T$.DiagnosticsPropertyOfPictureProviderL()).new("Picture provider", this);
          yield new (T$.DiagnosticsPropertyOfAssetBundlePictureKeyL()).new("Picture key", key);
        }).bind(this)), T$.VoidToIterableLOfDiagnosticsNodeL())});
    }
    [_loadAsync](key, onError) {
      return async.async(T$.PictureInfoL(), (function* _loadAsync() {
        let t2, t1, t0, t0$, t2$, t1$, t0$0;
        let data = (yield key.bundle.loadString(key.name));
        if (data == null) {
          dart.throw("Unable to read data");
        }
        if (onError != null) {
          t0$ = (t0 = data, t1 = key.colorFilter, t2 = dart.toString(key), this.decoder(t0, t1, t2));
          return (() => {
            t0$.catchError(onError);
            return t0$;
          })();
        }
        t0$0 = data;
        t1$ = key.colorFilter;
        t2$ = dart.toString(key);
        return this.decoder(t0$0, t1$, t2$);
      }).bind(this));
    }
  };
  (picture_provider.AssetBundlePictureProvider.new = function(decoder, colorFilter) {
    this[decoder$] = decoder;
    if (!(decoder != null)) dart.assertFailed(null, I[1], 435, 16, "decoder != null");
    picture_provider.AssetBundlePictureProvider.__proto__.new.call(this, colorFilter);
    ;
  }).prototype = picture_provider.AssetBundlePictureProvider.prototype;
  dart.addTypeTests(picture_provider.AssetBundlePictureProvider);
  dart.addTypeCaches(picture_provider.AssetBundlePictureProvider);
  dart.setMethodSignature(picture_provider.AssetBundlePictureProvider, () => ({
    __proto__: dart.getMethods(picture_provider.AssetBundlePictureProvider.__proto__),
    load: dart.fnType(dart.legacy(picture_stream.PictureStreamCompleter), [dart.legacy(core.Object)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(picture_provider.AssetBundlePictureKey), dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))])
  }));
  dart.setLibraryUri(picture_provider.AssetBundlePictureProvider, I[0]);
  dart.setFieldSignature(picture_provider.AssetBundlePictureProvider, () => ({
    __proto__: dart.getFields(picture_provider.AssetBundlePictureProvider.__proto__),
    decoder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(core.String), dart.legacy(ui.ColorFilter), dart.legacy(core.String)])))
  }));
  var decoder$0 = dart.privateName(picture_provider, "NetworkPicture.decoder");
  var url$ = dart.privateName(picture_provider, "NetworkPicture.url");
  var headers$ = dart.privateName(picture_provider, "NetworkPicture.headers");
  picture_provider.NetworkPicture = class NetworkPicture extends picture_provider.PictureProvider {
    get decoder() {
      return this[decoder$0];
    }
    set decoder(value) {
      super.decoder = value;
    }
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfNetworkPictureL()).new(this);
    }
    load(key, opts) {
      T$.NetworkPictureL().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}), {informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNodeL()).new((function*() {
          yield new (T$.DiagnosticsPropertyOfPictureProviderL()).new("Picture provider", this);
          yield new (T$.DiagnosticsPropertyOfNetworkPictureL()).new("Picture key", key);
        }).bind(this)), T$.VoidToIterableLOfDiagnosticsNodeL())});
    }
    [_loadAsync](key, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return async.async(T$.PictureInfoL(), (function* _loadAsync() {
        let t2, t1, t0, t0$, t2$, t1$, t0$0;
        if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 517, 12, "key == this");
        let bytes = (yield _http_web.httpGet(this.url));
        if (onError != null) {
          t0$ = (t0 = bytes, t1 = this.colorFilter, t2 = dart.toString(key), this.decoder(t0, t1, t2));
          return (() => {
            t0$.catchError(onError);
            return t0$;
          })();
        }
        t0$0 = bytes;
        t1$ = this.colorFilter;
        t2$ = dart.toString(key);
        return this.decoder(t0$0, t1$, t2$);
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.NetworkPictureL().is(other) && this.url == other.url && dart.equals(this.colorFilter, other.colorFilter);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.url), this.colorFilter);
    }
    toString() {
      return dart.str(this.runtimeType) + "(\"" + dart.str(this.url) + "\", headers: " + dart.str(this.headers) + ", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.NetworkPicture.new = function(decoder, url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[decoder$0] = decoder;
    this[url$] = url;
    this[headers$] = headers;
    if (!(url != null)) dart.assertFailed(null, I[1], 488, 16, "url != null");
    picture_provider.NetworkPicture.__proto__.new.call(this, colorFilter);
    ;
  }).prototype = picture_provider.NetworkPicture.prototype;
  dart.addTypeTests(picture_provider.NetworkPicture);
  dart.addTypeCaches(picture_provider.NetworkPicture);
  dart.setMethodSignature(picture_provider.NetworkPicture, () => ({
    __proto__: dart.getMethods(picture_provider.NetworkPicture.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_provider.NetworkPicture))), [dart.legacy(picture_provider.PictureConfiguration)]),
    load: dart.fnType(dart.legacy(picture_stream.PictureStreamCompleter), [dart.legacy(core.Object)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(picture_provider.NetworkPicture)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(picture_provider.NetworkPicture, () => ({
    __proto__: dart.getGetters(picture_provider.NetworkPicture.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.NetworkPicture, I[0]);
  dart.setFieldSignature(picture_provider.NetworkPicture, () => ({
    __proto__: dart.getFields(picture_provider.NetworkPicture.__proto__),
    decoder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(typed_data.Uint8List), dart.legacy(ui.ColorFilter), dart.legacy(core.String)]))),
    url: dart.finalFieldType(dart.legacy(core.String)),
    headers: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))))
  }));
  dart.defineExtensionMethods(picture_provider.NetworkPicture, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.NetworkPicture, ['hashCode']);
  var file$ = dart.privateName(picture_provider, "FilePicture.file");
  var decoder$1 = dart.privateName(picture_provider, "FilePicture.decoder");
  picture_provider.FilePicture = class FilePicture extends picture_provider.PictureProvider {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get decoder() {
      return this[decoder$1];
    }
    set decoder(value) {
      super.decoder = value;
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfFilePictureL()).new(this);
    }
    load(key, opts) {
      T$.FilePictureL().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}), {informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNodeL()).new((function*() {
          let t0;
          yield new (T$.DiagnosticsPropertyOfStringL()).new("Path", (t0 = this.file, t0 == null ? null : t0.path));
        }).bind(this)), T$.VoidToIterableLOfDiagnosticsNodeL())});
    }
    [_loadAsync](key, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return async.async(T$.PictureInfoL(), (function* _loadAsync() {
        let t2, t1, t0, t0$, t2$, t1$, t0$0;
        if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 579, 12, "key == this");
        let data = (yield this.file.readAsBytes());
        if (data == null || dart.test(data[$isEmpty])) {
          return null;
        }
        if (onError != null) {
          t0$ = (t0 = data, t1 = this.colorFilter, t2 = dart.toString(key), this.decoder(t0, t1, t2));
          return (() => {
            t0$.catchError(onError);
            return t0$;
          })();
        }
        t0$0 = data;
        t1$ = this.colorFilter;
        t2$ = dart.toString(key);
        return this.decoder(t0$0, t1$, t2$);
      }).bind(this));
    }
    _equals(other) {
      let t0, t0$;
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.FilePictureL().is(other) && (t0 = this.file, t0 == null ? null : t0.path) == (t0$ = other.file, t0$ == null ? null : t0$.path) && dart.equals(other.colorFilter, this.colorFilter);
    }
    get hashCode() {
      let t0, t0$;
      return ui.hashValues((t0$ = (t0 = this.file, t0 == null ? null : t0.path), t0$ == null ? null : dart.hashCode(t0$)), this.colorFilter);
    }
    toString() {
      let t0;
      return dart.str(this.runtimeType) + "(\"" + dart.str((t0 = this.file, t0 == null ? null : t0.path)) + "\", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.FilePicture.new = function(decoder, file, opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[decoder$1] = decoder;
    this[file$] = file;
    if (!(decoder != null)) dart.assertFailed(null, I[1], 554, 16, "decoder != null");
    if (!(file != null)) dart.assertFailed(null, I[1], 555, 16, "file != null");
    picture_provider.FilePicture.__proto__.new.call(this, colorFilter);
    ;
  }).prototype = picture_provider.FilePicture.prototype;
  dart.addTypeTests(picture_provider.FilePicture);
  dart.addTypeCaches(picture_provider.FilePicture);
  dart.setMethodSignature(picture_provider.FilePicture, () => ({
    __proto__: dart.getMethods(picture_provider.FilePicture.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_provider.FilePicture))), [dart.legacy(picture_provider.PictureConfiguration)]),
    load: dart.fnType(dart.legacy(picture_stream.PictureStreamCompleter), [dart.legacy(core.Object)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(picture_provider.FilePicture)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(picture_provider.FilePicture, () => ({
    __proto__: dart.getGetters(picture_provider.FilePicture.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.FilePicture, I[0]);
  dart.setFieldSignature(picture_provider.FilePicture, () => ({
    __proto__: dart.getFields(picture_provider.FilePicture.__proto__),
    file: dart.finalFieldType(dart.legacy(io.File)),
    decoder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(typed_data.Uint8List), dart.legacy(ui.ColorFilter), dart.legacy(core.String)])))
  }));
  dart.defineExtensionMethods(picture_provider.FilePicture, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.FilePicture, ['hashCode']);
  var decoder$2 = dart.privateName(picture_provider, "MemoryPicture.decoder");
  var bytes$ = dart.privateName(picture_provider, "MemoryPicture.bytes");
  picture_provider.MemoryPicture = class MemoryPicture extends picture_provider.PictureProvider {
    get decoder() {
      return this[decoder$2];
    }
    set decoder(value) {
      super.decoder = value;
    }
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfMemoryPictureL()).new(this);
    }
    load(key, opts) {
      T$.MemoryPictureL().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}));
    }
    [_loadAsync](key, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return async.async(T$.PictureInfoL(), (function* _loadAsync() {
        let t2, t1, t0, t0$, t2$, t1$, t0$0;
        if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 648, 12, "key == this");
        if (onError != null) {
          t0$ = (t0 = this.bytes, t1 = this.colorFilter, t2 = dart.toString(key), this.decoder(t0, t1, t2));
          return (() => {
            t0$.catchError(onError);
            return t0$;
          })();
        }
        t0$0 = this.bytes;
        t1$ = this.colorFilter;
        t2$ = dart.toString(key);
        return this.decoder(t0$0, t1$, t2$);
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.MemoryPictureL().is(other) && dart.equals(this.bytes, other.bytes) && dart.equals(this.colorFilter, other.colorFilter);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.bytes), this.colorFilter);
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(diagnostics.describeIdentity(this.bytes)) + ")";
    }
  };
  (picture_provider.MemoryPicture.new = function(decoder, bytes, opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[decoder$2] = decoder;
    this[bytes$] = bytes;
    if (!(bytes != null)) dart.assertFailed(null, I[1], 626, 16, "bytes != null");
    picture_provider.MemoryPicture.__proto__.new.call(this, colorFilter);
    ;
  }).prototype = picture_provider.MemoryPicture.prototype;
  dart.addTypeTests(picture_provider.MemoryPicture);
  dart.addTypeCaches(picture_provider.MemoryPicture);
  dart.setMethodSignature(picture_provider.MemoryPicture, () => ({
    __proto__: dart.getMethods(picture_provider.MemoryPicture.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_provider.MemoryPicture))), [dart.legacy(picture_provider.PictureConfiguration)]),
    load: dart.fnType(dart.legacy(picture_stream.PictureStreamCompleter), [dart.legacy(core.Object)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(picture_provider.MemoryPicture)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(picture_provider.MemoryPicture, () => ({
    __proto__: dart.getGetters(picture_provider.MemoryPicture.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.MemoryPicture, I[0]);
  dart.setFieldSignature(picture_provider.MemoryPicture, () => ({
    __proto__: dart.getFields(picture_provider.MemoryPicture.__proto__),
    decoder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(typed_data.Uint8List), dart.legacy(ui.ColorFilter), dart.legacy(core.String)]))),
    bytes: dart.finalFieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.defineExtensionMethods(picture_provider.MemoryPicture, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.MemoryPicture, ['hashCode']);
  var decoder$3 = dart.privateName(picture_provider, "StringPicture.decoder");
  var string$ = dart.privateName(picture_provider, "StringPicture.string");
  picture_provider.StringPicture = class StringPicture extends picture_provider.PictureProvider {
    get decoder() {
      return this[decoder$3];
    }
    set decoder(value) {
      super.decoder = value;
    }
    get string() {
      return this[string$];
    }
    set string(value) {
      super.string = value;
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfStringPictureL()).new(this);
    }
    load(key, opts) {
      T$.StringPictureL().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}));
    }
    [_loadAsync](key, opts) {
      let t2, t1, t0, t0$, t2$, t1$, t0$0;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 713, 12, "key == this");
      if (onError != null) {
        t0$ = (t0 = this.string, t1 = this.colorFilter, t2 = dart.toString(key), this.decoder(t0, t1, t2));
        return (() => {
          t0$.catchError(onError);
          return t0$;
        })();
      }
      t0$0 = this.string;
      t1$ = this.colorFilter;
      t2$ = dart.toString(key);
      return this.decoder(t0$0, t1$, t2$);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.StringPictureL().is(other) && this.string == other.string && dart.equals(this.colorFilter, other.colorFilter);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.string), this.colorFilter);
    }
    toString() {
      return dart.str(this.runtimeType) + "(" + dart.str(diagnostics.describeIdentity(this.string)) + ", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.StringPicture.new = function(decoder, string, opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[decoder$3] = decoder;
    this[string$] = string;
    if (!(string != null)) dart.assertFailed(null, I[1], 689, 16, "string != null");
    picture_provider.StringPicture.__proto__.new.call(this, colorFilter);
    ;
  }).prototype = picture_provider.StringPicture.prototype;
  dart.addTypeTests(picture_provider.StringPicture);
  dart.addTypeCaches(picture_provider.StringPicture);
  dart.setMethodSignature(picture_provider.StringPicture, () => ({
    __proto__: dart.getMethods(picture_provider.StringPicture.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_provider.StringPicture))), [dart.legacy(picture_provider.PictureConfiguration)]),
    load: dart.fnType(dart.legacy(picture_stream.PictureStreamCompleter), [dart.legacy(core.Object)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(picture_provider.StringPicture)], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(picture_provider.StringPicture, () => ({
    __proto__: dart.getGetters(picture_provider.StringPicture.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.StringPicture, I[0]);
  dart.setFieldSignature(picture_provider.StringPicture, () => ({
    __proto__: dart.getFields(picture_provider.StringPicture.__proto__),
    decoder: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_stream.PictureInfo))), [dart.legacy(core.String), dart.legacy(ui.ColorFilter), dart.legacy(core.String)]))),
    string: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(picture_provider.StringPicture, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.StringPicture, ['hashCode']);
  var assetName$ = dart.privateName(picture_provider, "ExactAssetPicture.assetName");
  var bundle$1 = dart.privateName(picture_provider, "ExactAssetPicture.bundle");
  var $package$ = dart.privateName(picture_provider, "ExactAssetPicture.package");
  picture_provider.ExactAssetPicture = class ExactAssetPicture extends picture_provider.AssetBundlePictureProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get bundle() {
      return this[bundle$1];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + dart.str(this.assetName);
    }
    obtainKey(picture) {
      let t0, t0$;
      return new (T$.SynchronousFutureOfAssetBundlePictureKeyL()).new(new picture_provider.AssetBundlePictureKey.new({bundle: (t0$ = (t0 = this.bundle, t0 == null ? picture.bundle : t0), t0$ == null ? asset_bundle.rootBundle : t0$), name: this.keyName, colorFilter: this.colorFilter}));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return T$.ExactAssetPictureL().is(other) && this.keyName == other.keyName && dart.equals(this.bundle, other.bundle) && dart.equals(this.colorFilter, other.colorFilter);
    }
    get hashCode() {
      return ui.hashValues(this.keyName, this.bundle, this.colorFilter);
    }
    toString() {
      return dart.str(this.runtimeType) + "(name: \"" + dart.str(this.keyName) + "\", bundle: " + dart.str(this.bundle) + ", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.ExactAssetPicture.new = function(decoder, assetName, opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[assetName$] = assetName;
    this[bundle$1] = bundle;
    this[$package$] = $package;
    if (!(assetName != null)) dart.assertFailed(null, I[1], 825, 16, "assetName != null");
    picture_provider.ExactAssetPicture.__proto__.new.call(this, decoder, colorFilter);
    ;
  }).prototype = picture_provider.ExactAssetPicture.prototype;
  dart.addTypeTests(picture_provider.ExactAssetPicture);
  dart.addTypeCaches(picture_provider.ExactAssetPicture);
  dart.setMethodSignature(picture_provider.ExactAssetPicture, () => ({
    __proto__: dart.getMethods(picture_provider.ExactAssetPicture.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(picture_provider.AssetBundlePictureKey))), [dart.legacy(picture_provider.PictureConfiguration)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(picture_provider.ExactAssetPicture, () => ({
    __proto__: dart.getGetters(picture_provider.ExactAssetPicture.__proto__),
    keyName: dart.legacy(core.String),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_provider.ExactAssetPicture, I[0]);
  dart.setFieldSignature(picture_provider.ExactAssetPicture, () => ({
    __proto__: dart.getFields(picture_provider.ExactAssetPicture.__proto__),
    assetName: dart.finalFieldType(dart.legacy(core.String)),
    bundle: dart.finalFieldType(dart.legacy(asset_bundle.AssetBundle)),
    package: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(picture_provider.ExactAssetPicture, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.ExactAssetPicture, ['hashCode']);
  picture_provider.createLocalPictureConfiguration = function createLocalPictureConfiguration(context, opts) {
    let t0;
    let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
    let colorFilterOverride = opts && 'colorFilterOverride' in opts ? opts.colorFilterOverride : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : null;
    let filter = colorFilterOverride;
    if (filter == null && color != null) {
      filter = new _engine._CkBlendModeColorFilter.new(color, (t0 = colorBlendMode, t0 == null ? ui.BlendMode.srcIn : t0));
    }
    return new picture_provider.PictureConfiguration.new({bundle: context != null ? basic.DefaultAssetBundle.of(context) : asset_bundle.rootBundle, locale: context != null ? localizations.Localizations.maybeLocaleOf(context) : null, textDirection: context != null ? basic.Directionality.maybeOf(context) : null, viewBox: viewBox, platform: platform.defaultTargetPlatform, colorFilter: filter});
  };
  dart.defineLazy(picture_provider, {
    /*picture_provider._cache*/get _cache() {
      return new picture_cache.PictureCache.new();
    },
    set _cache(_) {}
  }, true);
  dart.setBaseClass(picture_provider.NetworkPicture, picture_provider.PictureProvider$(picture_provider.NetworkPicture));
  dart.setBaseClass(picture_provider.FilePicture, picture_provider.PictureProvider$(picture_provider.FilePicture));
  dart.setBaseClass(picture_provider.MemoryPicture, picture_provider.PictureProvider$(picture_provider.MemoryPicture));
  dart.setBaseClass(picture_provider.StringPicture, picture_provider.PictureProvider$(picture_provider.StringPicture));
  dart.trackLibraries("packages/flutter_svg/src/picture_provider.dart", {
    "package:flutter_svg/src/picture_provider.dart": picture_provider
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["picture_provider.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/flutter_svg/src/picture_provider.dart.lib.js"}');
  // Exports:
  return {
    src__picture_provider: picture_provider
  };
}));

//# sourceMappingURL=picture_provider.dart.lib.js.map
