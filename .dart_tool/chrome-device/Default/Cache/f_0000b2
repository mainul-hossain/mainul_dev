define(['dart_sdk', 'packages/petitparser/src/parser/misc/eof.dart', 'packages/petitparser/src/parser/combinator/optional.dart', 'packages/petitparser/src/parser/predicate/string.dart', 'packages/xml/src/xml/utils/character_data_parser.dart', 'packages/petitparser/src/parser/action/pick.dart', 'packages/petitparser/src/parser/action/flatten.dart', 'packages/petitparser/src/parser/repeater/lazy.dart', 'packages/petitparser/src/parser/repeater/separated_by.dart', 'packages/petitparser/src/parser/character/whitespace.dart', 'packages/petitparser/src/parser/character/pattern.dart', 'packages/petitparser/src/definition/grammar.dart', 'packages/xml/src/xml/entities/entity_mapping.dart'], (function load__packages__xml__src__xml__production_dart(dart_sdk, packages__petitparser__src__parser__misc__eof$46dart, packages__petitparser__src__parser__combinator__optional$46dart, packages__petitparser__src__parser__predicate__string$46dart, packages__xml__src__xml__utils__character_data_parser$46dart, packages__petitparser__src__parser__action__pick$46dart, packages__petitparser__src__parser__action__flatten$46dart, packages__petitparser__src__parser__repeater__lazy$46dart, packages__petitparser__src__parser__repeater__separated_by$46dart, packages__petitparser__src__parser__character__whitespace$46dart, packages__petitparser__src__parser__character__pattern$46dart, packages__petitparser__src__definition__grammar$46dart, packages__xml__src__xml__entities__entity_mapping$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const eof = packages__petitparser__src__parser__misc__eof$46dart.src__parser__misc__eof;
  const sequence = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__combinator__sequence;
  const choice = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__combinator__choice;
  const possessive = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__repeater__possessive;
  const any = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__predicate__any;
  const optional = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__combinator__optional;
  const token = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__action__token;
  const parser = packages__petitparser__src__parser__combinator__optional$46dart.src__core__parser;
  const string = packages__petitparser__src__parser__predicate__string$46dart.src__parser__predicate__string;
  const character_data_parser = packages__xml__src__xml__utils__character_data_parser$46dart.src__xml__utils__character_data_parser;
  const pick = packages__petitparser__src__parser__action__pick$46dart.src__parser__action__pick;
  const flatten = packages__petitparser__src__parser__action__flatten$46dart.src__parser__action__flatten;
  const lazy = packages__petitparser__src__parser__repeater__lazy$46dart.src__parser__repeater__lazy;
  const separated_by = packages__petitparser__src__parser__repeater__separated_by$46dart.src__parser__repeater__separated_by;
  const whitespace = packages__petitparser__src__parser__character__whitespace$46dart.src__parser__character__whitespace;
  const pattern = packages__petitparser__src__parser__character__pattern$46dart.src__parser__character__pattern;
  const grammar = packages__petitparser__src__definition__grammar$46dart.src__definition__grammar;
  const entity_mapping = packages__xml__src__xml__entities__entity_mapping$46dart.src__xml__entities__entity_mapping;
  var production = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    ListLOfStringL: () => (T.ListLOfStringL = dart.constFn(dart.legacy(T.ListOfStringL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = ["package:xml/src/xml/production.dart"];
  var entityMapping$ = dart.privateName(production, "XmlProductionDefinition.entityMapping");
  production.XmlProductionDefinition = class XmlProductionDefinition extends grammar.GrammarDefinition {
    get entityMapping() {
      return this[entityMapping$];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    start() {
      return eof['EndOfInputParserExtension|end'](dart.dynamic, this.ref(dart.bind(this, 'document')));
    }
    attribute() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](dart.dynamic, this.ref(dart.bind(this, 'qualified')), this.ref(dart.bind(this, 'spaceOptional'))), string['PredicateStringExtension|toParser']("=")), this.ref(dart.bind(this, 'spaceOptional'))), this.ref(dart.bind(this, 'attributeValue')));
    }
    attributeValue() {
      return choice['ChoiceParserExtension|or'](dart.dynamic, this.ref(dart.bind(this, 'attributeValueDouble')), this.ref(dart.bind(this, 'attributeValueSingle')));
    }
    attributeValueDouble() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("\""), new character_data_parser.XmlCharacterDataParser.new(this.entityMapping, "\"", 0)), string['PredicateStringExtension|toParser']("\""));
    }
    attributeValueSingle() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("'"), new character_data_parser.XmlCharacterDataParser.new(this.entityMapping, "'", 0)), string['PredicateStringExtension|toParser']("'"));
    }
    attributes() {
      return possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, pick['PickParserExtension|pick'](dart.dynamic, sequence['SequenceParserExtension|seq'](dart.dynamic, this.ref(dart.bind(this, 'space')), this.ref(dart.bind(this, 'attribute'))), 1));
    }
    comment() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("<!--"), flatten['FlattenParserExtension|flatten'](T.ListLOfStringL(), lazy['LazyRepeatingParserExtension|starLazy'](T.StringL(), any.any(), string['PredicateStringExtension|toParser']("-->")), "Expected comment content")), string['PredicateStringExtension|toParser']("-->"));
    }
    cdata() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("<![CDATA["), flatten['FlattenParserExtension|flatten'](T.ListLOfStringL(), lazy['LazyRepeatingParserExtension|starLazy'](T.StringL(), any.any(), string['PredicateStringExtension|toParser']("]]>")), "Expected CDATA content")), string['PredicateStringExtension|toParser']("]]>"));
    }
    content() {
      return possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, this.ref(dart.bind(this, 'characterData')), this.ref(dart.bind(this, 'element'))), this.ref(dart.bind(this, 'processing'))), this.ref(dart.bind(this, 'comment'))), this.ref(dart.bind(this, 'cdata'))));
    }
    declaration() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("<?xml"), this.ref(dart.bind(this, 'attributes'))), this.ref(dart.bind(this, 'spaceOptional'))), string['PredicateStringExtension|toParser']("?>"));
    }
    doctype() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("<!DOCTYPE"), this.ref(dart.bind(this, 'space'))), flatten['FlattenParserExtension|flatten'](T.ListL(), separated_by['SeparatedBy|separatedBy'](dart.dynamic, dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, this.ref(dart.bind(this, 'nameToken')), this.ref(dart.bind(this, 'attributeValue'))), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListLOfStringL(), lazy['LazyRepeatingParserExtension|starLazy'](T.StringL(), any.any(), string['PredicateStringExtension|toParser']("[")), string['PredicateStringExtension|toParser']("[")), lazy['LazyRepeatingParserExtension|starLazy'](T.StringL(), any.any(), string['PredicateStringExtension|toParser']("]"))), string['PredicateStringExtension|toParser']("]"))), this.ref(dart.bind(this, 'space'))), "Expected doctype content")), this.ref(dart.bind(this, 'spaceOptional'))), string['PredicateStringExtension|toParser'](">"));
    }
    document() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](dart.dynamic, optional['OptionalParserExtension|optional'](dart.dynamic, this.ref(dart.bind(this, 'declaration'))), this.ref(dart.bind(this, 'misc'))), optional['OptionalParserExtension|optional'](dart.dynamic, this.ref(dart.bind(this, 'doctype')))), this.ref(dart.bind(this, 'misc'))), this.ref(dart.bind(this, 'element'))), this.ref(dart.bind(this, 'misc')));
    }
    documentFragment() {
      return possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, this.ref(dart.bind(this, 'characterData')), this.ref(dart.bind(this, 'element'))), this.ref(dart.bind(this, 'comment'))), this.ref(dart.bind(this, 'cdata'))), this.ref(dart.bind(this, 'declaration'))), this.ref(dart.bind(this, 'processing'))), this.ref(dart.bind(this, 'doctype'))));
    }
    element() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("<"), this.ref(dart.bind(this, 'qualified'))), this.ref(dart.bind(this, 'attributes'))), this.ref(dart.bind(this, 'spaceOptional'))), choice['ChoiceParserExtension|or'](T.StringL(), string['PredicateStringExtension|toParser']("/>"), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser'](">"), this.ref(dart.bind(this, 'content'))), token['TokenParserExtension|token'](T.StringL(), string['PredicateStringExtension|toParser']("</"))), this.ref(dart.bind(this, 'qualified'))), this.ref(dart.bind(this, 'spaceOptional'))), string['PredicateStringExtension|toParser'](">"))));
    }
    processing() {
      return sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.ListL(), sequence['SequenceParserExtension|seq'](T.StringL(), string['PredicateStringExtension|toParser']("<?"), this.ref(dart.bind(this, 'nameToken'))), optional['OptionalParserExtension|optional'](dart.dynamic, pick['PickParserExtension|pick'](dart.dynamic, sequence['SequenceParserExtension|seq'](dart.dynamic, this.ref(dart.bind(this, 'space')), flatten['FlattenParserExtension|flatten'](T.ListLOfStringL(), lazy['LazyRepeatingParserExtension|starLazy'](T.StringL(), any.any(), string['PredicateStringExtension|toParser']("?>")), "Expected processing instruction content")), 1), "")), string['PredicateStringExtension|toParser']("?>"));
    }
    qualified() {
      return this.ref(dart.bind(this, 'nameToken'));
    }
    characterData() {
      return new character_data_parser.XmlCharacterDataParser.new(this.entityMapping, "<", 1);
    }
    misc() {
      return possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.dynamic, this.ref(dart.bind(this, 'spaceText')), this.ref(dart.bind(this, 'comment'))), this.ref(dart.bind(this, 'processing'))));
    }
    space() {
      return possessive['PossessiveRepeatingParserExtension|plus'](T.StringL(), whitespace.whitespace());
    }
    spaceText() {
      return flatten['FlattenParserExtension|flatten'](dart.dynamic, this.ref(dart.bind(this, 'space')), "Expected whitespace");
    }
    spaceOptional() {
      return possessive['PossessiveRepeatingParserExtension|star'](T.StringL(), whitespace.whitespace());
    }
    nameToken() {
      return flatten['FlattenParserExtension|flatten'](T.ListL(), sequence['SequenceParserExtension|seq'](dart.dynamic, this.ref(dart.bind(this, 'nameStartChar')), possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, this.ref(dart.bind(this, 'nameChar')))), "Expected name");
    }
    nameStartChar() {
      return pattern.pattern(production.XmlProductionDefinition._nameStartChars);
    }
    nameChar() {
      return pattern.pattern(production.XmlProductionDefinition._nameChars);
    }
  };
  (production.XmlProductionDefinition.new = function(entityMapping) {
    this[entityMapping$] = entityMapping;
    production.XmlProductionDefinition.__proto__.new.call(this);
    ;
  }).prototype = production.XmlProductionDefinition.prototype;
  dart.addTypeTests(production.XmlProductionDefinition);
  dart.addTypeCaches(production.XmlProductionDefinition);
  dart.setMethodSignature(production.XmlProductionDefinition, () => ({
    __proto__: dart.getMethods(production.XmlProductionDefinition.__proto__),
    start: dart.fnType(dart.legacy(parser.Parser), []),
    attribute: dart.fnType(dart.legacy(parser.Parser), []),
    attributeValue: dart.fnType(dart.legacy(parser.Parser), []),
    attributeValueDouble: dart.fnType(dart.legacy(parser.Parser), []),
    attributeValueSingle: dart.fnType(dart.legacy(parser.Parser), []),
    attributes: dart.fnType(dart.legacy(parser.Parser), []),
    comment: dart.fnType(dart.legacy(parser.Parser), []),
    cdata: dart.fnType(dart.legacy(parser.Parser), []),
    content: dart.fnType(dart.legacy(parser.Parser), []),
    declaration: dart.fnType(dart.legacy(parser.Parser), []),
    doctype: dart.fnType(dart.legacy(parser.Parser), []),
    document: dart.fnType(dart.legacy(parser.Parser), []),
    documentFragment: dart.fnType(dart.legacy(parser.Parser), []),
    element: dart.fnType(dart.legacy(parser.Parser), []),
    processing: dart.fnType(dart.legacy(parser.Parser), []),
    qualified: dart.fnType(dart.legacy(parser.Parser), []),
    characterData: dart.fnType(dart.legacy(parser.Parser), []),
    misc: dart.fnType(dart.legacy(parser.Parser), []),
    space: dart.fnType(dart.legacy(parser.Parser), []),
    spaceText: dart.fnType(dart.legacy(parser.Parser), []),
    spaceOptional: dart.fnType(dart.legacy(parser.Parser), []),
    nameToken: dart.fnType(dart.legacy(parser.Parser), []),
    nameStartChar: dart.fnType(dart.legacy(parser.Parser), []),
    nameChar: dart.fnType(dart.legacy(parser.Parser), [])
  }));
  dart.setLibraryUri(production.XmlProductionDefinition, I[0]);
  dart.setFieldSignature(production.XmlProductionDefinition, () => ({
    __proto__: dart.getFields(production.XmlProductionDefinition.__proto__),
    entityMapping: dart.finalFieldType(dart.legacy(entity_mapping.XmlEntityMapping))
  }));
  dart.defineLazy(production.XmlProductionDefinition, {
    /*production.XmlProductionDefinition._nameStartChars*/get _nameStartChars() {
      return ":A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";
    },
    /*production.XmlProductionDefinition._nameChars*/get _nameChars() {
      return ":A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�-.0-9·̀-ͯ‿-⁀";
    }
  }, true);
  dart.trackLibraries("packages/xml/src/xml/production.dart", {
    "package:xml/src/xml/production.dart": production
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["production.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2ByB;;;;;;;AAKL,YAAc,oDAAd,mBAAI;IAAe;;AAEf,YAIjB,oDADA,mDADA,mDADA,sDADiB,mBAAI,qBACjB,mBAAI,0BACY,mDAChB,mBAAI,0BACJ,mBAAI;IAAgB;;AAGzB,YAA0B,kDAA1B,mBAAI,gCAAyB,mBAAI;IAAsB;;AAE1B,YAG5B,oDADA,qDADA,mDACI,qDAAuB,0BAAqC,KACvC;IAAW;;AAER,YAG5B,oDADA,qDADA,kDACI,qDAAuB,yBAAqC,KACvC;IAAW;;AAElB,YAAuC,qEAAR,+CAApB,sDAAX,mBAAI,iBAAW,mBAAI,sBAAiB;IAAS;;AAEhD,YAKf,oDAHA,qDADA,qDAGI,8DADA,2DADA,WAC+B,qDACvB,8BACc;IAAW;;AAExB,YAKb,oDAHA,qDADA,0DAGI,8DADA,2DADA,WAC6B,qDACrB,4BACY;IAAW;;AAEpB,YAKf,qEADA,iDADA,iDADA,iDADA,iDADe,mBAAI,yBAChB,mBAAI,oBACJ,mBAAI,uBACJ,mBAAI,oBACJ,mBAAI;IACD;;AAEa,YAInB,oDADA,mDADA,qDADA,sDACI,mBAAI,uBACJ,mBAAI,0BACsB;IAAW;;AAE1B,YAaf,oDADA,mDATA,mDADA,qDADA,0DACI,mBAAI,kBASJ,qDADA,oEALA,iDADA,iDADA,mBAAI,qBACD,mBAAI,2BAKH,mDADA,mDADA,4DADA,2DADD,WACoC,mDACL,mDACpB,2DAAN,WAA0C,oDACf,oDACvB,mBAAI,kBACR,8BACR,mBAAI,0BACkB;IAAW;;AAErB,YAMhB,oDADA,mDADA,mDADA,mDADA,sDADA,2DADgB,mBAAI,wBAEhB,mBAAI,iBACS,2DAAb,mBAAI,qBACJ,mBAAI,iBACJ,mBAAI,oBACJ,mBAAI;IAAM;;AAEU,YAOxB,qEADA,iDADA,iDADA,iDADA,iDADA,iDADA,iDADwB,mBAAI,yBACzB,mBAAI,oBACJ,mBAAI,oBACJ,mBAAI,kBACJ,mBAAI,wBACJ,mBAAI,uBACJ,mBAAI;IACD;;AAES,YAKf,oDADA,mDADA,mDADA,qDADA,kDACI,mBAAI,sBACJ,mBAAI,uBACJ,mBAAI,0BACgC,gDAAX,mDAMzB,mDADA,mDADA,mDADA,mDADA,qDADA,kDACI,mBAAI,oBAC+B,iDAAX,qDACxB,mBAAI,sBACJ,mBAAI,0BACkB;IAAa;;AAEzB,YASlB,oDANA,mDADA,qDADA,mDACI,mBAAI,sBAMJ,2DADA,+CAHA,sDADA,mBAAI,iBAGA,8DADA,2DADA,WACkC,oDAC1B,6CACP,IACI,MACgB;IAAW;;AAEvB,gCAAI;IAAU;;AAGhC,kEAAuB,yBAAqC;IAAE;;AAEjD,YAAoD,qEAApB,iDAAjB,iDAAf,mBAAI,qBAAc,mBAAI,oBAAa,mBAAI;IAAmB;;AAEzD,YAAa,oEAAb;IAAmB;;AAEf,YAAW,yDAAX,mBAAI,iBAAe;IAAsB;;AAErC,YAAa,oEAAb;IAAmB;;AAGzC,YAA6C,sDAA1B,sDAAnB,mBAAI,yBAAiC,oEAAd,mBAAI,sBAA0B;IAAgB;;AAE/C,6BAAQ;IAAgB;;AAE7B,6BAAQ;IAAW;;;IA/HX;AAA7B;;EAA2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MApBvB,kDAAe;;;MAYf,6CAAU","file":"../../../../../../../../../../packages/xml/src/xml/production.dart.lib.js"}');
  // Exports:
  return {
    src__xml__production: production
  };
}));

//# sourceMappingURL=production.dart.lib.js.map
