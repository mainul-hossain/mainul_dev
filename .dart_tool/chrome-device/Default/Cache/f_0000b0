define(['dart_sdk', 'packages/xml/src/xml/entities/entity_mapping.dart', 'packages/xml/src/xml/entities/default_mapping.dart', 'packages/xml/src/xml/utils/node_type.dart', 'packages/petitparser/src/parser/combinator/optional.dart', 'packages/xml/src/xml/utils/cache.dart', 'packages/petitparser/src/parser/misc/eof.dart', 'packages/xml/src/xml/utils/attribute_type.dart', 'packages/petitparser/src/parser/action/cast.dart', 'packages/xml/src/xml/production.dart', 'packages/collection/src/union_set_controller.dart'], (function load__packages__xml__src__xml__utils__simple_name_dart(dart_sdk, packages__xml__src__xml__entities__entity_mapping$46dart, packages__xml__src__xml__entities__default_mapping$46dart, packages__xml__src__xml__utils__node_type$46dart, packages__petitparser__src__parser__combinator__optional$46dart, packages__xml__src__xml__utils__cache$46dart, packages__petitparser__src__parser__misc__eof$46dart, packages__xml__src__xml__utils__attribute_type$46dart, packages__petitparser__src__parser__action__cast$46dart, packages__xml__src__xml__production$46dart, packages__collection__src__union_set_controller$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const entity_mapping = packages__xml__src__xml__entities__entity_mapping$46dart.src__xml__entities__entity_mapping;
  const default_mapping = packages__xml__src__xml__entities__default_mapping$46dart.src__xml__entities__default_mapping;
  const node_type = packages__xml__src__xml__utils__node_type$46dart.src__xml__utils__node_type;
  const token$ = packages__petitparser__src__parser__combinator__optional$46dart.src__core__token;
  const parser = packages__petitparser__src__parser__combinator__optional$46dart.src__core__parser;
  const map = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__action__map;
  const cache = packages__xml__src__xml__utils__cache$46dart.src__xml__utils__cache;
  const eof = packages__petitparser__src__parser__misc__eof$46dart.src__parser__misc__eof;
  const attribute_type = packages__xml__src__xml__utils__attribute_type$46dart.src__xml__utils__attribute_type;
  const cast = packages__petitparser__src__parser__action__cast$46dart.src__parser__action__cast;
  const production = packages__xml__src__xml__production$46dart.src__xml__production;
  const wrappers = packages__collection__src__union_set_controller$46dart.src__wrappers;
  var simple_name = Object.create(dart.library);
  var prefix_name = Object.create(dart.library);
  var has_xml = Object.create(dart.library);
  var writer$ = Object.create(dart.library);
  var pretty_writer = Object.create(dart.library);
  var has_writer = Object.create(dart.library);
  var descendants = Object.create(dart.library);
  var has_text = Object.create(dart.library);
  var text$ = Object.create(dart.library);
  var processing = Object.create(dart.library);
  var document_fragment = Object.create(dart.library);
  var exceptions = Object.create(dart.library);
  var grammar = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var element = Object.create(dart.library);
  var has_children = Object.create(dart.library);
  var document = Object.create(dart.library);
  var doctype = Object.create(dart.library);
  var declaration = Object.create(dart.library);
  var data = Object.create(dart.library);
  var comment = Object.create(dart.library);
  var has_visitor = Object.create(dart.library);
  var visitor = Object.create(dart.library);
  var cdata = Object.create(dart.library);
  var transformer = Object.create(dart.library);
  var node_list = Object.create(dart.library);
  var name_matcher = Object.create(dart.library);
  var has_attributes = Object.create(dart.library);
  var node = Object.create(dart.library);
  var has_parent = Object.create(dart.library);
  var name$ = Object.create(dart.library);
  var has_name = Object.create(dart.library);
  var attribute = Object.create(dart.library);
  var namespace$ = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $join = dartx.join;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $add = dartx.add;
  var $_equals = dartx._equals;
  var $iterator = dartx.iterator;
  var $times = dartx['*'];
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $trim = dartx.trim;
  var $replaceAll = dartx.replaceAll;
  var $last = dartx.last;
  var $reversed = dartx.reversed;
  var $addAll = dartx.addAll;
  var $removeLast = dartx.removeLast;
  var $firstWhere = dartx.firstWhere;
  var $contains = dartx.contains;
  var $cast = dartx.cast;
  var $remove = dartx.remove;
  var $removeWhere = dartx.removeWhere;
  var $retainWhere = dartx.retainWhere;
  var $removeRange = dartx.removeRange;
  var $fillRange = dartx.fillRange;
  var $setRange = dartx.setRange;
  var $replaceRange = dartx.replaceRange;
  var $setAll = dartx.setAll;
  var $insert = dartx.insert;
  var $insertAll = dartx.insertAll;
  var $removeAt = dartx.removeAt;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    XmlNameL: () => (T.XmlNameL = dart.constFn(dart.legacy(name$.XmlName)))(),
    XmlNodeL: () => (T.XmlNodeL = dart.constFn(dart.legacy(node.XmlNode)))(),
    XmlAttributeL: () => (T.XmlAttributeL = dart.constFn(dart.legacy(attribute.XmlAttribute)))(),
    XmlTextL: () => (T.XmlTextL = dart.constFn(dart.legacy(text$.XmlText)))(),
    XmlCDATAL: () => (T.XmlCDATAL = dart.constFn(dart.legacy(cdata.XmlCDATA)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    XmlNodeLToboolL: () => (T.XmlNodeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.XmlNodeL()])))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    XmlNodeLToStringL: () => (T.XmlNodeLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.XmlNodeL()])))(),
    JSArrayOfXmlNodeL: () => (T.JSArrayOfXmlNodeL = dart.constFn(_interceptors.JSArray$(T.XmlNodeL())))(),
    XmlDocumentFragmentL: () => (T.XmlDocumentFragmentL = dart.constFn(dart.legacy(document_fragment.XmlDocumentFragment)))(),
    XmlNodeListOfXmlNodeL: () => (T.XmlNodeListOfXmlNodeL = dart.constFn(node_list.XmlNodeList$(T.XmlNodeL())))(),
    XmlElementL: () => (T.XmlElementL = dart.constFn(dart.legacy(element.XmlElement)))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    XmlNodeTypeL: () => (T.XmlNodeTypeL = dart.constFn(dart.legacy(node_type.XmlNodeType)))(),
    XmlEntityMappingL: () => (T.XmlEntityMappingL = dart.constFn(dart.legacy(entity_mapping.XmlEntityMapping)))(),
    ParserL: () => (T.ParserL = dart.constFn(dart.legacy(parser.Parser)))(),
    XmlCacheOfXmlEntityMappingL$ParserL: () => (T.XmlCacheOfXmlEntityMappingL$ParserL = dart.constFn(cache.XmlCache$(T.XmlEntityMappingL(), T.ParserL())))(),
    dynamicToParserL: () => (T.dynamicToParserL = dart.constFn(dart.fnType(T.ParserL(), [dart.dynamic])))(),
    XmlAttributeTypeL: () => (T.XmlAttributeTypeL = dart.constFn(dart.legacy(attribute_type.XmlAttributeType)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    dynamicToListL: () => (T.dynamicToListL = dart.constFn(dart.fnType(T.ListL(), [dart.dynamic])))(),
    IterableL: () => (T.IterableL = dart.constFn(dart.legacy(core.Iterable)))(),
    TokenL: () => (T.TokenL = dart.constFn(dart.legacy(token$.Token)))(),
    IterableOfXmlNodeL: () => (T.IterableOfXmlNodeL = dart.constFn(core.Iterable$(T.XmlNodeL())))(),
    IterableLOfXmlNodeL: () => (T.IterableLOfXmlNodeL = dart.constFn(dart.legacy(T.IterableOfXmlNodeL())))(),
    XmlNodeListOfXmlAttributeL: () => (T.XmlNodeListOfXmlAttributeL = dart.constFn(node_list.XmlNodeList$(T.XmlAttributeL())))(),
    XmlDocumentL: () => (T.XmlDocumentL = dart.constFn(dart.legacy(document.XmlDocument)))(),
    XmlDeclarationL: () => (T.XmlDeclarationL = dart.constFn(dart.legacy(declaration.XmlDeclaration)))(),
    XmlDoctypeL: () => (T.XmlDoctypeL = dart.constFn(dart.legacy(doctype.XmlDoctype)))(),
    VoidTobottom: () => (T.VoidTobottom = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidToXmlNodeL: () => (T.VoidToXmlNodeL = dart.constFn(dart.fnType(T.XmlNodeL(), [])))(),
    XmlHasNameL: () => (T.XmlHasNameL = dart.constFn(dart.legacy(has_name.XmlHasName)))(),
    XmlHasNameLToboolL: () => (T.XmlHasNameLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.XmlHasNameL()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(new _js_helper.PrivateSymbol.new('_noParent', _noParent));
    },
    get C1() {
      return C[1] = dart.constList([], T.XmlAttributeL());
    },
    get C2() {
      return C[2] = dart.constList([], T.XmlNodeL());
    },
    get C3() {
      return C[3] = dart.const(new _js_helper.PrivateSymbol.new('_noParent', _noParent$0));
    },
    get C5() {
      return C[5] = dart.constMap(T.StringL(), T.StringL(), ["amp", "&", "apos", "'", "gt", ">", "lt", "<", "quot", "\""]);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: default_mapping.XmlDefaultEntityMapping.prototype,
        [XmlDefaultEntityMapping_entities]: C[5] || CT.C5
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.CDATA",
        index: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.COMMENT",
        index: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.DECLARATION",
        index: 3
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.DOCUMENT_TYPE",
        index: 4
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.ELEMENT",
        index: 7
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.PROCESSING",
        index: 8
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.TEXT",
        index: 9
      });
    },
    get C6() {
      return C[6] = dart.constSet(T.XmlNodeTypeL(), [C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13]);
    },
    get C14() {
      return C[14] = dart.constSet(T.XmlNodeTypeL(), [C[7] || CT.C7, C[8] || CT.C8, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13]);
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_name]: "XmlNodeType.ATTRIBUTE",
        index: 0
      });
    },
    get C15() {
      return C[15] = dart.constSet(T.XmlNodeTypeL(), [C[16] || CT.C16]);
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: attribute_type.XmlAttributeType.prototype,
        [_name$]: "XmlAttributeType.DOUBLE_QUOTE",
        index: 1
      });
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "package:xml/src/xml/mixins/has_visitor.dart",
    "package:xml/src/xml/mixins/has_writer.dart",
    "package:xml/src/xml/mixins/has_parent.dart",
    "package:xml/src/xml/mixins/has_attributes.dart",
    "package:xml/src/xml/mixins/has_children.dart",
    "package:xml/src/xml/mixins/has_text.dart",
    "package:xml/src/xml/mixins/has_xml.dart",
    "package:xml/src/xml/nodes/node.dart",
    "package:xml/src/xml/utils/name.dart",
    "package:xml/src/xml/utils/simple_name.dart",
    "package:xml/src/xml/utils/prefix_name.dart",
    "package:xml/src/xml/visitors/visitor.dart",
    "package:xml/src/xml/visitors/writer.dart",
    "package:xml/src/xml/visitors/pretty_writer.dart",
    "package:xml/src/xml/navigation/descendants.dart",
    "package:xml/src/xml/nodes/data.dart",
    "package:xml/src/xml/nodes/text.dart",
    "package:xml/src/xml/nodes/processing.dart",
    "package:xml/src/xml/nodes/document_fragment.dart",
    "package:xml/src/xml/utils/exceptions.dart",
    "package:xml/src/xml/grammar.dart",
    "package:xml/src/xml/parser.dart",
    "package:xml/src/xml/mixins/has_name.dart",
    "package:xml/src/xml/nodes/element.dart",
    "package:xml/src/xml/nodes/document.dart",
    "package:xml/src/xml/nodes/doctype.dart",
    "package:xml/src/xml/nodes/declaration.dart",
    "package:xml/src/xml/nodes/comment.dart",
    "package:xml/src/xml/nodes/cdata.dart",
    "package:xml/src/xml/visitors/transformer.dart",
    "package:xml/src/xml/utils/node_list.dart",
    "package:xml/src/xml/nodes/attribute.dart"
  ];
  var local$ = dart.privateName(simple_name, "XmlSimpleName.local");
  var _noParent = dart.privateName(simple_name, "_noParent");
  var _noParent$ = dart.privateName(has_parent, "_noParent");
  has_visitor.XmlHasVisitor = class XmlHasVisitor extends core.Object {};
  has_visitor.XmlHasVisitor[dart.mixinOn] = Object => class XmlHasVisitor extends Object {};
  (has_visitor.XmlHasVisitor[dart.mixinNew] = function() {
  }).prototype = has_visitor.XmlHasVisitor.prototype;
  dart.addTypeTests(has_visitor.XmlHasVisitor);
  dart.addTypeCaches(has_visitor.XmlHasVisitor);
  has_visitor.XmlHasVisitor[dart.implements] = () => [core.Object];
  dart.setLibraryUri(has_visitor.XmlHasVisitor, I[0]);
  has_writer.XmlHasWriter = class XmlHasWriter extends core.Object {};
  has_writer.XmlHasWriter[dart.mixinOn] = Object => {
    class XmlHasWriter extends Object {
      toXmlString(opts) {
        let pretty = opts && 'pretty' in opts ? opts.pretty : false;
        let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
        let level = opts && 'level' in opts ? opts.level : null;
        let indent = opts && 'indent' in opts ? opts.indent : null;
        let newLine = opts && 'newLine' in opts ? opts.newLine : null;
        let preserveWhitespace = opts && 'preserveWhitespace' in opts ? opts.preserveWhitespace : null;
        let indentAttribute = opts && 'indentAttribute' in opts ? opts.indentAttribute : null;
        let sortAttributes = opts && 'sortAttributes' in opts ? opts.sortAttributes : null;
        let buffer = new core.StringBuffer.new();
        let writer = dart.test(pretty) ? new pretty_writer.XmlPrettyWriter.new(buffer, {entityMapping: entityMapping, level: level, indent: indent, newLine: newLine, preserveWhitespace: preserveWhitespace, indentAttribute: indentAttribute, sortAttributes: sortAttributes}) : new writer$.XmlWriter.new(buffer, {entityMapping: entityMapping});
        writer.visit(dart.dynamic, this);
        return buffer.toString();
      }
      toString() {
        return this.toXmlString();
      }
    }
    dart.defineExtensionMethods(XmlHasWriter, ['toString']);
    return XmlHasWriter;
  };
  (has_writer.XmlHasWriter[dart.mixinNew] = function() {
  }).prototype = has_writer.XmlHasWriter.prototype;
  dart.addTypeTests(has_writer.XmlHasWriter);
  dart.addTypeCaches(has_writer.XmlHasWriter);
  has_writer.XmlHasWriter[dart.implements] = () => [has_visitor.XmlHasVisitor, core.Object];
  dart.setMethodSignature(has_writer.XmlHasWriter, () => ({
    __proto__: dart.getMethods(has_writer.XmlHasWriter.__proto__),
    toXmlString: dart.fnType(dart.legacy(core.String), [], {entityMapping: dart.legacy(entity_mapping.XmlEntityMapping), indent: dart.legacy(core.String), indentAttribute: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(attribute.XmlAttribute)])), level: dart.legacy(core.int), newLine: dart.legacy(core.String), preserveWhitespace: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(node.XmlNode)])), pretty: dart.legacy(core.bool), sortAttributes: dart.legacy(dart.fnType(dart.legacy(core.int), [dart.legacy(attribute.XmlAttribute), dart.legacy(attribute.XmlAttribute)]))}, {}),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(has_writer.XmlHasWriter, I[1]);
  var _parent = dart.privateName(has_parent, "_parent");
  const _is_XmlHasParent_default = Symbol('_is_XmlHasParent_default');
  has_parent.XmlHasParent$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class XmlHasParent extends core.Object {}
    XmlHasParent[dart.mixinOn] = Object => class XmlHasParent extends Object {
      get parent() {
        return this[_parent];
      }
      get hasParent() {
        return this.parent != null;
      }
      replace(other) {
        if (dart.test(this.hasParent)) {
          let siblings = this.parent.children;
          for (let i = 0; i < dart.notNull(siblings[$length]); i = i + 1) {
            if (siblings[$_get](i) === this) {
              siblings[$_set](i, other);
              break;
            }
          }
        }
      }
      attachParent(parent) {
        TL().as(parent);
        exceptions.XmlParentException.checkNoParent(this);
        this[_parent] = parent;
      }
      detachParent(parent) {
        TL().as(parent);
        exceptions.XmlParentException.checkMatchingParent(this, parent);
        this[_parent] = null;
      }
    };
    (XmlHasParent[dart.mixinNew] = function() {
      this[_parent] = null;
    }).prototype = XmlHasParent.prototype;
    dart.addTypeTests(XmlHasParent);
    XmlHasParent.prototype[_is_XmlHasParent_default] = true;
    dart.addTypeCaches(XmlHasParent);
    XmlHasParent[dart.implements] = () => [has_parent.XmlParentBase, core.Object];
    dart.setMethodSignature(XmlHasParent, () => ({
      __proto__: dart.getMethods(XmlHasParent.__proto__),
      replace: dart.fnType(dart.void, [dart.legacy(node.XmlNode)]),
      attachParent: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      detachParent: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(XmlHasParent, () => ({
      __proto__: dart.getGetters(XmlHasParent.__proto__),
      parent: dart.legacy(T),
      hasParent: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(XmlHasParent, I[2]);
    dart.setFieldSignature(XmlHasParent, () => ({
      __proto__: dart.getFields(XmlHasParent.__proto__),
      [_parent]: dart.fieldType(dart.legacy(T))
    }));
    return XmlHasParent;
  });
  has_parent.XmlHasParent = has_parent.XmlHasParent$();
  dart.addTypeTests(has_parent.XmlHasParent, _is_XmlHasParent_default);
  has_parent.XmlParentBase = class XmlParentBase extends core.Object {};
  has_parent.XmlParentBase[dart.mixinOn] = Object => class XmlParentBase extends Object {
    get parent() {
      return null;
    }
    get hasParent() {
      return false;
    }
    replace(other) {
      return this[_noParent$]();
    }
    attachParent(parent) {
      T.XmlNodeL().as(parent);
      return this[_noParent$]();
    }
    detachParent(parent) {
      T.XmlNodeL().as(parent);
      return this[_noParent$]();
    }
    [_noParent$]() {
      return dart.throw(new core.UnsupportedError.new(dart.str(this) + " does not have a parent."));
    }
  };
  (has_parent.XmlParentBase[dart.mixinNew] = function() {
  }).prototype = has_parent.XmlParentBase.prototype;
  dart.addTypeTests(has_parent.XmlParentBase);
  dart.addTypeCaches(has_parent.XmlParentBase);
  has_parent.XmlParentBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_parent.XmlParentBase, () => ({
    __proto__: dart.getMethods(has_parent.XmlParentBase.__proto__),
    replace: dart.fnType(dart.void, [dart.legacy(node.XmlNode)]),
    attachParent: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    detachParent: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_noParent$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(has_parent.XmlParentBase, () => ({
    __proto__: dart.getGetters(has_parent.XmlParentBase.__proto__),
    parent: dart.legacy(node.XmlNode),
    hasParent: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(has_parent.XmlParentBase, I[2]);
  has_attributes.XmlAttributesBase = class XmlAttributesBase extends core.Object {};
  has_attributes.XmlAttributesBase[dart.mixinOn] = Object => class XmlAttributesBase extends Object {
    get attributes() {
      return C[1] || CT.C1;
    }
    getAttribute(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return null;
    }
    getAttributeNode(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return null;
    }
    setAttribute(name, value, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return dart.throw(new core.UnsupportedError.new(dart.str(this) + " has no attributes."));
    }
    removeAttribute(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return this.setAttribute(name, null, {namespace: namespace});
    }
  };
  (has_attributes.XmlAttributesBase[dart.mixinNew] = function() {
  }).prototype = has_attributes.XmlAttributesBase.prototype;
  dart.addTypeTests(has_attributes.XmlAttributesBase);
  dart.addTypeCaches(has_attributes.XmlAttributesBase);
  has_attributes.XmlAttributesBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_attributes.XmlAttributesBase, () => ({
    __proto__: dart.getMethods(has_attributes.XmlAttributesBase.__proto__),
    getAttribute: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {}),
    getAttributeNode: dart.fnType(dart.legacy(attribute.XmlAttribute), [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {}),
    setAttribute: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {}),
    removeAttribute: dart.fnType(dart.void, [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(has_attributes.XmlAttributesBase, () => ({
    __proto__: dart.getGetters(has_attributes.XmlAttributesBase.__proto__),
    attributes: dart.legacy(core.List$(dart.legacy(attribute.XmlAttribute)))
  }));
  dart.setLibraryUri(has_attributes.XmlAttributesBase, I[3]);
  has_children.XmlChildrenBase = class XmlChildrenBase extends core.Object {};
  has_children.XmlChildrenBase[dart.mixinOn] = Object => class XmlChildrenBase extends Object {
    get children() {
      return C[2] || CT.C2;
    }
    getElement(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return null;
    }
    get firstChild() {
      return null;
    }
    get firstElementChild() {
      return null;
    }
    get lastChild() {
      return null;
    }
    get lastElementChild() {
      return null;
    }
  };
  (has_children.XmlChildrenBase[dart.mixinNew] = function() {
  }).prototype = has_children.XmlChildrenBase.prototype;
  dart.addTypeTests(has_children.XmlChildrenBase);
  dart.addTypeCaches(has_children.XmlChildrenBase);
  has_children.XmlChildrenBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_children.XmlChildrenBase, () => ({
    __proto__: dart.getMethods(has_children.XmlChildrenBase.__proto__),
    getElement: dart.fnType(dart.legacy(element.XmlElement), [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(has_children.XmlChildrenBase, () => ({
    __proto__: dart.getGetters(has_children.XmlChildrenBase.__proto__),
    children: dart.legacy(core.List$(dart.legacy(node.XmlNode))),
    firstChild: dart.legacy(node.XmlNode),
    firstElementChild: dart.legacy(element.XmlElement),
    lastChild: dart.legacy(node.XmlNode),
    lastElementChild: dart.legacy(element.XmlElement)
  }));
  dart.setLibraryUri(has_children.XmlChildrenBase, I[4]);
  has_text.XmlHasText = class XmlHasText extends core.Object {};
  has_text.XmlHasText[dart.mixinOn] = Object => class XmlHasText extends Object {
    get text() {
      return this.innerText;
    }
    get innerText() {
      return new descendants.XmlDescendantsIterable.new(T.XmlNodeL().as(this)).where(dart.fn(node => T.XmlTextL().is(node) || T.XmlCDATAL().is(node), T.XmlNodeLToboolL()))[$map](T.StringL(), dart.fn(node => node.text, T.XmlNodeLToStringL()))[$join]();
    }
    set innerText(value) {
      this.children[$clear]();
      if (value != null && value[$isNotEmpty]) {
        this.children[$add](new text$.XmlText.new(value));
      }
    }
  };
  (has_text.XmlHasText[dart.mixinNew] = function() {
  }).prototype = has_text.XmlHasText.prototype;
  dart.addTypeTests(has_text.XmlHasText);
  dart.addTypeCaches(has_text.XmlHasText);
  has_text.XmlHasText[dart.implements] = () => [has_children.XmlChildrenBase, core.Object];
  dart.setGetterSignature(has_text.XmlHasText, () => ({
    __proto__: dart.getGetters(has_text.XmlHasText.__proto__),
    text: dart.legacy(core.String),
    innerText: dart.legacy(core.String)
  }));
  dart.setSetterSignature(has_text.XmlHasText, () => ({
    __proto__: dart.getSetters(has_text.XmlHasText.__proto__),
    innerText: dart.legacy(core.String)
  }));
  dart.setLibraryUri(has_text.XmlHasText, I[5]);
  has_xml.XmlHasXml = class XmlHasXml extends core.Object {};
  has_xml.XmlHasXml[dart.mixinOn] = Object => class XmlHasXml extends Object {
    get outerXml() {
      return this.toXmlString();
    }
    set outerXml(value) {
      return this.replace(document_fragment.XmlDocumentFragment.parse(value));
    }
    get innerXml() {
      return this.children[$map](T.StringL(), dart.fn(node => node.toXmlString(), T.XmlNodeLToStringL()))[$join]();
    }
    set innerXml(value) {
      let t0;
      t0 = this.children;
      return (() => {
        t0[$clear]();
        t0[$add](document_fragment.XmlDocumentFragment.parse(value));
        return t0;
      })();
    }
  };
  (has_xml.XmlHasXml[dart.mixinNew] = function() {
  }).prototype = has_xml.XmlHasXml.prototype;
  dart.addTypeTests(has_xml.XmlHasXml);
  dart.addTypeCaches(has_xml.XmlHasXml);
  has_xml.XmlHasXml[dart.implements] = () => [has_children.XmlChildrenBase, has_parent.XmlParentBase, has_writer.XmlHasWriter, core.Object];
  dart.setGetterSignature(has_xml.XmlHasXml, () => ({
    __proto__: dart.getGetters(has_xml.XmlHasXml.__proto__),
    outerXml: dart.legacy(core.String),
    innerXml: dart.legacy(core.String)
  }));
  dart.setSetterSignature(has_xml.XmlHasXml, () => ({
    __proto__: dart.getSetters(has_xml.XmlHasXml.__proto__),
    outerXml: dart.legacy(core.String),
    innerXml: dart.legacy(core.String)
  }));
  dart.setLibraryUri(has_xml.XmlHasXml, I[6]);
  const Object_XmlParentBase$36 = class Object_XmlParentBase extends core.Object {};
  (Object_XmlParentBase$36.new = function() {
  }).prototype = Object_XmlParentBase$36.prototype;
  dart.applyMixin(Object_XmlParentBase$36, has_parent.XmlParentBase);
  const Object_XmlAttributesBase$36 = class Object_XmlAttributesBase extends Object_XmlParentBase$36 {};
  (Object_XmlAttributesBase$36.new = function() {
  }).prototype = Object_XmlAttributesBase$36.prototype;
  dart.applyMixin(Object_XmlAttributesBase$36, has_attributes.XmlAttributesBase);
  const Object_XmlChildrenBase$36 = class Object_XmlChildrenBase extends Object_XmlAttributesBase$36 {};
  (Object_XmlChildrenBase$36.new = function() {
  }).prototype = Object_XmlChildrenBase$36.prototype;
  dart.applyMixin(Object_XmlChildrenBase$36, has_children.XmlChildrenBase);
  const Object_XmlHasText$36 = class Object_XmlHasText extends Object_XmlChildrenBase$36 {};
  (Object_XmlHasText$36.new = function() {
  }).prototype = Object_XmlHasText$36.prototype;
  dart.applyMixin(Object_XmlHasText$36, has_text.XmlHasText);
  const Object_XmlHasVisitor$36 = class Object_XmlHasVisitor extends Object_XmlHasText$36 {};
  (Object_XmlHasVisitor$36.new = function() {
  }).prototype = Object_XmlHasVisitor$36.prototype;
  dart.applyMixin(Object_XmlHasVisitor$36, has_visitor.XmlHasVisitor);
  const Object_XmlHasWriter$36 = class Object_XmlHasWriter extends Object_XmlHasVisitor$36 {};
  (Object_XmlHasWriter$36.new = function() {
  }).prototype = Object_XmlHasWriter$36.prototype;
  dart.applyMixin(Object_XmlHasWriter$36, has_writer.XmlHasWriter);
  const Object_XmlHasXml$36 = class Object_XmlHasXml extends Object_XmlHasWriter$36 {};
  (Object_XmlHasXml$36.new = function() {
  }).prototype = Object_XmlHasXml$36.prototype;
  dart.applyMixin(Object_XmlHasXml$36, has_xml.XmlHasXml);
  node.XmlNode = class XmlNode extends Object_XmlHasXml$36 {};
  (node.XmlNode.new = function() {
    ;
  }).prototype = node.XmlNode.prototype;
  dart.addTypeTests(node.XmlNode);
  dart.addTypeCaches(node.XmlNode);
  dart.setLibraryUri(node.XmlNode, I[7]);
  const Object_XmlHasVisitor$36$ = class Object_XmlHasVisitor extends core.Object {};
  (Object_XmlHasVisitor$36$.new = function() {
  }).prototype = Object_XmlHasVisitor$36$.prototype;
  dart.applyMixin(Object_XmlHasVisitor$36$, has_visitor.XmlHasVisitor);
  const Object_XmlHasWriter$36$ = class Object_XmlHasWriter extends Object_XmlHasVisitor$36$ {};
  (Object_XmlHasWriter$36$.new = function() {
  }).prototype = Object_XmlHasWriter$36$.prototype;
  dart.applyMixin(Object_XmlHasWriter$36$, has_writer.XmlHasWriter);
  const Object_XmlHasParent$36 = class Object_XmlHasParent extends Object_XmlHasWriter$36$ {};
  (Object_XmlHasParent$36.new = function() {
    has_parent.XmlHasParent$(dart.legacy(node.XmlNode))[dart.mixinNew].call(this);
  }).prototype = Object_XmlHasParent$36.prototype;
  dart.applyMixin(Object_XmlHasParent$36, has_parent.XmlHasParent$(dart.legacy(node.XmlNode)));
  name$.XmlName = class XmlName extends Object_XmlHasParent$36 {
    static new(local, prefix = null) {
      return prefix == null || prefix[$isEmpty] ? new simple_name.XmlSimpleName.new(local) : new prefix_name.XmlPrefixName.new(prefix, local, dart.str(prefix) + ":" + dart.str(local));
    }
    static fromString(qualified) {
      let index = qualified[$indexOf](":");
      if (index > 0) {
        let prefix = qualified[$substring](0, index);
        let local = qualified[$substring](index + 1);
        return new prefix_name.XmlPrefixName.new(prefix, local, qualified);
      } else {
        return new simple_name.XmlSimpleName.new(qualified);
      }
    }
    accept(visitor) {
      return visitor.visitName(this);
    }
    _equals(other) {
      if (other == null) return false;
      return T.XmlNameL().is(other) && other.qualified == this.qualified;
    }
    get hashCode() {
      return dart.hashCode(this.qualified);
    }
  };
  (name$.XmlName.internal = function() {
    name$.XmlName.__proto__.new.call(this);
    ;
  }).prototype = name$.XmlName.prototype;
  dart.addTypeTests(name$.XmlName);
  dart.addTypeCaches(name$.XmlName);
  dart.setMethodSignature(name$.XmlName, () => ({
    __proto__: dart.getMethods(name$.XmlName.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(name$.XmlName, () => ({
    __proto__: dart.getGetters(name$.XmlName.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(name$.XmlName, I[8]);
  dart.defineExtensionMethods(name$.XmlName, ['_equals']);
  dart.defineExtensionAccessors(name$.XmlName, ['hashCode']);
  simple_name.XmlSimpleName = class XmlSimpleName extends name$.XmlName {
    get local() {
      return this[local$];
    }
    set local(value) {
      super.local = value;
    }
    get prefix() {
      return null;
    }
    get qualified() {
      return this.local;
    }
    get namespaceUri() {
      let t0;
      t0 = namespace$.lookupAttribute(this.parent, null, "xmlns");
      return t0 == null ? null : t0.value;
    }
    [_noParent$]() {
      return this.noSuchMethod(new core._Invocation.method(C[0] || CT.C0, null, []));
    }
  };
  (simple_name.XmlSimpleName.new = function(local) {
    this[local$] = local;
    simple_name.XmlSimpleName.__proto__.internal.call(this);
    ;
  }).prototype = simple_name.XmlSimpleName.prototype;
  dart.addTypeTests(simple_name.XmlSimpleName);
  dart.addTypeCaches(simple_name.XmlSimpleName);
  dart.setMethodSignature(simple_name.XmlSimpleName, () => ({
    __proto__: dart.getMethods(simple_name.XmlSimpleName.__proto__),
    [_noParent$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(simple_name.XmlSimpleName, () => ({
    __proto__: dart.getGetters(simple_name.XmlSimpleName.__proto__),
    prefix: dart.legacy(core.String),
    qualified: dart.legacy(core.String),
    namespaceUri: dart.legacy(core.String)
  }));
  dart.setLibraryUri(simple_name.XmlSimpleName, I[9]);
  dart.setFieldSignature(simple_name.XmlSimpleName, () => ({
    __proto__: dart.getFields(simple_name.XmlSimpleName.__proto__),
    local: dart.finalFieldType(dart.legacy(core.String))
  }));
  var prefix$ = dart.privateName(prefix_name, "XmlPrefixName.prefix");
  var local$0 = dart.privateName(prefix_name, "XmlPrefixName.local");
  var qualified$ = dart.privateName(prefix_name, "XmlPrefixName.qualified");
  var _noParent$0 = dart.privateName(prefix_name, "_noParent");
  prefix_name.XmlPrefixName = class XmlPrefixName extends name$.XmlName {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      super.prefix = value;
    }
    get local() {
      return this[local$0];
    }
    set local(value) {
      super.local = value;
    }
    get qualified() {
      return this[qualified$];
    }
    set qualified(value) {
      super.qualified = value;
    }
    get namespaceUri() {
      let t0;
      t0 = namespace$.lookupAttribute(this.parent, "xmlns", this.prefix);
      return t0 == null ? null : t0.value;
    }
    [_noParent$]() {
      return this.noSuchMethod(new core._Invocation.method(C[3] || CT.C3, null, []));
    }
  };
  (prefix_name.XmlPrefixName.new = function(prefix, local, qualified) {
    this[prefix$] = prefix;
    this[local$0] = local;
    this[qualified$] = qualified;
    prefix_name.XmlPrefixName.__proto__.internal.call(this);
    ;
  }).prototype = prefix_name.XmlPrefixName.prototype;
  dart.addTypeTests(prefix_name.XmlPrefixName);
  dart.addTypeCaches(prefix_name.XmlPrefixName);
  dart.setMethodSignature(prefix_name.XmlPrefixName, () => ({
    __proto__: dart.getMethods(prefix_name.XmlPrefixName.__proto__),
    [_noParent$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(prefix_name.XmlPrefixName, () => ({
    __proto__: dart.getGetters(prefix_name.XmlPrefixName.__proto__),
    namespaceUri: dart.legacy(core.String)
  }));
  dart.setLibraryUri(prefix_name.XmlPrefixName, I[10]);
  dart.setFieldSignature(prefix_name.XmlPrefixName, () => ({
    __proto__: dart.getFields(prefix_name.XmlPrefixName.__proto__),
    prefix: dart.finalFieldType(dart.legacy(core.String)),
    local: dart.finalFieldType(dart.legacy(core.String)),
    qualified: dart.finalFieldType(dart.legacy(core.String))
  }));
  var buffer$ = dart.privateName(writer$, "XmlWriter.buffer");
  var entityMapping$ = dart.privateName(writer$, "XmlWriter.entityMapping");
  var XmlDefaultEntityMapping_entities = dart.privateName(default_mapping, "XmlDefaultEntityMapping.entities");
  visitor.XmlVisitor = class XmlVisitor extends core.Object {};
  visitor.XmlVisitor[dart.mixinOn] = Object => class XmlVisitor extends Object {
    visit(T, visitable) {
      return dart.legacy(T).as(visitable.accept(this));
    }
    visitName(name) {
      return null;
    }
    visitAttribute(node) {
      return null;
    }
    visitDeclaration(node) {
      return null;
    }
    visitDocument(node) {
      return null;
    }
    visitDocumentFragment(node) {
      return null;
    }
    visitElement(node) {
      return null;
    }
    visitCDATA(node) {
      return null;
    }
    visitComment(node) {
      return null;
    }
    visitDoctype(node) {
      return null;
    }
    visitProcessing(node) {
      return null;
    }
    visitText(node) {
      return null;
    }
  };
  (visitor.XmlVisitor[dart.mixinNew] = function() {
  }).prototype = visitor.XmlVisitor.prototype;
  dart.addTypeTests(visitor.XmlVisitor);
  dart.addTypeCaches(visitor.XmlVisitor);
  visitor.XmlVisitor[dart.implements] = () => [core.Object];
  dart.setMethodSignature(visitor.XmlVisitor, () => ({
    __proto__: dart.getMethods(visitor.XmlVisitor.__proto__),
    visit: dart.gFnType(T => [dart.legacy(T), [dart.legacy(has_visitor.XmlHasVisitor)]]),
    visitName: dart.fnType(dart.dynamic, [dart.legacy(name$.XmlName)]),
    visitAttribute: dart.fnType(dart.dynamic, [dart.legacy(attribute.XmlAttribute)]),
    visitDeclaration: dart.fnType(dart.dynamic, [dart.legacy(declaration.XmlDeclaration)]),
    visitDocument: dart.fnType(dart.dynamic, [dart.legacy(document.XmlDocument)]),
    visitDocumentFragment: dart.fnType(dart.dynamic, [dart.legacy(document_fragment.XmlDocumentFragment)]),
    visitElement: dart.fnType(dart.dynamic, [dart.legacy(element.XmlElement)]),
    visitCDATA: dart.fnType(dart.dynamic, [dart.legacy(cdata.XmlCDATA)]),
    visitComment: dart.fnType(dart.dynamic, [dart.legacy(comment.XmlComment)]),
    visitDoctype: dart.fnType(dart.dynamic, [dart.legacy(doctype.XmlDoctype)]),
    visitProcessing: dart.fnType(dart.dynamic, [dart.legacy(processing.XmlProcessing)]),
    visitText: dart.fnType(dart.dynamic, [dart.legacy(text$.XmlText)])
  }));
  dart.setLibraryUri(visitor.XmlVisitor, I[11]);
  const Object_XmlVisitor$36 = class Object_XmlVisitor extends core.Object {};
  (Object_XmlVisitor$36.new = function() {
  }).prototype = Object_XmlVisitor$36.prototype;
  dart.applyMixin(Object_XmlVisitor$36, visitor.XmlVisitor);
  writer$.XmlWriter = class XmlWriter extends Object_XmlVisitor$36 {
    get buffer() {
      return this[buffer$];
    }
    set buffer(value) {
      super.buffer = value;
    }
    get entityMapping() {
      return this[entityMapping$];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    visitAttribute(node) {
      this.visit(dart.dynamic, node.name);
      this.buffer.write("=");
      this.buffer.write(this.entityMapping.encodeAttributeValueWithQuotes(node.value, node.attributeType));
    }
    visitCDATA(node) {
      this.buffer.write("<![CDATA[");
      this.buffer.write(node.text);
      this.buffer.write("]]>");
    }
    visitComment(node) {
      this.buffer.write("<!--");
      this.buffer.write(node.text);
      this.buffer.write("-->");
    }
    visitDeclaration(node) {
      this.buffer.write("<?xml");
      this.writeAttributes(node);
      this.buffer.write("?>");
    }
    visitDoctype(node) {
      this.buffer.write("<!DOCTYPE");
      this.buffer.write(" ");
      this.buffer.write(node.text);
      this.buffer.write(">");
    }
    visitDocument(node) {
      this.writeIterable(node.children);
    }
    visitDocumentFragment(node) {
      this.buffer.write("#document-fragment");
    }
    visitElement(node) {
      this.buffer.write("<");
      this.visit(dart.dynamic, node.name);
      this.writeAttributes(node);
      if (dart.test(node.children.isEmpty) && dart.test(node.isSelfClosing)) {
        this.buffer.write("/>");
      } else {
        this.buffer.write(">");
        this.writeIterable(node.children);
        this.buffer.write("</");
        this.visit(dart.dynamic, node.name);
        this.buffer.write(">");
      }
    }
    visitName(name) {
      this.buffer.write(name.qualified);
    }
    visitProcessing(node) {
      this.buffer.write("<?");
      this.buffer.write(node.target);
      if (node.text[$isNotEmpty]) {
        this.buffer.write(" ");
        this.buffer.write(node.text);
      }
      this.buffer.write("?>");
    }
    visitText(node) {
      this.buffer.write(this.entityMapping.encodeText(node.text));
    }
    writeAttributes(node) {
      if (dart.test(node.attributes.isNotEmpty)) {
        this.buffer.write(" ");
        this.writeIterable(node.attributes, " ");
      }
    }
    writeIterable(nodes, separator = null) {
      let iterator = nodes[$iterator];
      if (dart.test(iterator.moveNext())) {
        if (separator == null || separator[$isEmpty]) {
          do {
            this.visit(dart.dynamic, iterator.current);
          } while (dart.test(iterator.moveNext()));
        } else {
          this.visit(dart.dynamic, iterator.current);
          while (dart.test(iterator.moveNext())) {
            this.buffer.write(separator);
            this.visit(dart.dynamic, iterator.current);
          }
        }
      }
    }
  };
  (writer$.XmlWriter.new = function(buffer, opts) {
    let t0;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    this[buffer$] = buffer;
    this[entityMapping$] = (t0 = entityMapping, t0 == null ? C[4] || CT.C4 : t0);
    ;
  }).prototype = writer$.XmlWriter.prototype;
  dart.addTypeTests(writer$.XmlWriter);
  dart.addTypeCaches(writer$.XmlWriter);
  dart.setMethodSignature(writer$.XmlWriter, () => ({
    __proto__: dart.getMethods(writer$.XmlWriter.__proto__),
    visitAttribute: dart.fnType(dart.void, [dart.legacy(attribute.XmlAttribute)]),
    visitCDATA: dart.fnType(dart.void, [dart.legacy(cdata.XmlCDATA)]),
    visitComment: dart.fnType(dart.void, [dart.legacy(comment.XmlComment)]),
    visitDeclaration: dart.fnType(dart.void, [dart.legacy(declaration.XmlDeclaration)]),
    visitDoctype: dart.fnType(dart.void, [dart.legacy(doctype.XmlDoctype)]),
    visitDocument: dart.fnType(dart.void, [dart.legacy(document.XmlDocument)]),
    visitDocumentFragment: dart.fnType(dart.void, [dart.legacy(document_fragment.XmlDocumentFragment)]),
    visitElement: dart.fnType(dart.void, [dart.legacy(element.XmlElement)]),
    visitName: dart.fnType(dart.void, [dart.legacy(name$.XmlName)]),
    visitProcessing: dart.fnType(dart.void, [dart.legacy(processing.XmlProcessing)]),
    visitText: dart.fnType(dart.void, [dart.legacy(text$.XmlText)]),
    writeAttributes: dart.fnType(dart.void, [dart.legacy(has_attributes.XmlHasAttributes)]),
    writeIterable: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(has_visitor.XmlHasVisitor)))], [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(writer$.XmlWriter, I[12]);
  dart.setFieldSignature(writer$.XmlWriter, () => ({
    __proto__: dart.getFields(writer$.XmlWriter.__proto__),
    buffer: dart.finalFieldType(dart.legacy(core.StringSink)),
    entityMapping: dart.finalFieldType(dart.legacy(entity_mapping.XmlEntityMapping))
  }));
  var level$ = dart.privateName(pretty_writer, "XmlPrettyWriter.level");
  var pretty = dart.privateName(pretty_writer, "XmlPrettyWriter.pretty");
  var indent$ = dart.privateName(pretty_writer, "XmlPrettyWriter.indent");
  var newLine$ = dart.privateName(pretty_writer, "XmlPrettyWriter.newLine");
  var preserveWhitespace$ = dart.privateName(pretty_writer, "XmlPrettyWriter.preserveWhitespace");
  var indentAttribute$ = dart.privateName(pretty_writer, "XmlPrettyWriter.indentAttribute");
  var sortAttributes$ = dart.privateName(pretty_writer, "XmlPrettyWriter.sortAttributes");
  pretty_writer.XmlPrettyWriter = class XmlPrettyWriter extends writer$.XmlWriter {
    get level() {
      return this[level$];
    }
    set level(value) {
      this[level$] = value;
    }
    get pretty() {
      return this[pretty];
    }
    set pretty(value) {
      this[pretty] = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
    get newLine() {
      return this[newLine$];
    }
    set newLine(value) {
      super.newLine = value;
    }
    get preserveWhitespace() {
      return this[preserveWhitespace$];
    }
    set preserveWhitespace(value) {
      super.preserveWhitespace = value;
    }
    get indentAttribute() {
      return this[indentAttribute$];
    }
    set indentAttribute(value) {
      super.indentAttribute = value;
    }
    get sortAttributes() {
      return this[sortAttributes$];
    }
    set sortAttributes(value) {
      super.sortAttributes = value;
    }
    visitDocument(node) {
      this.buffer.write(this.indent[$times](this.level));
      this.writeIterable(this.normalizeText(node.children), dart.notNull(this.newLine) + this.indent[$times](this.level));
    }
    visitElement(node) {
      let t0;
      this.buffer.write("<");
      this.visit(dart.dynamic, node.name);
      this.writeAttributes(node);
      if (dart.test(node.children.isEmpty) && dart.test(node.isSelfClosing)) {
        this.buffer.write("/>");
      } else {
        this.buffer.write(">");
        if (dart.test(node.children.isNotEmpty)) {
          if (dart.test(this.pretty)) {
            if (this.preserveWhitespace != null && dart.test((t0 = node, this.preserveWhitespace(t0)))) {
              this.pretty = false;
              this.writeIterable(node.children);
              this.pretty = true;
            } else if (dart.test(node.children.every(dart.fn(each => T.XmlTextL().is(each), T.XmlNodeLToboolL())))) {
              this.writeIterable(this.normalizeText(node.children));
            } else {
              this.level = dart.notNull(this.level) + 1;
              this.buffer.write(this.newLine);
              this.buffer.write(this.indent[$times](this.level));
              this.writeIterable(this.normalizeText(node.children), dart.notNull(this.newLine) + this.indent[$times](this.level));
              this.level = dart.notNull(this.level) - 1;
              this.buffer.write(this.newLine);
              this.buffer.write(this.indent[$times](this.level));
            }
          } else {
            this.writeIterable(node.children);
          }
        }
        this.buffer.write("</");
        this.visit(dart.dynamic, node.name);
        this.buffer.write(">");
      }
    }
    writeAttributes(node) {
      let t0;
      for (let attribute of this.normalizeAttributes(node.attributes)) {
        if (dart.test(this.pretty) && this.indentAttribute != null && dart.test((t0 = attribute, this.indentAttribute(t0)))) {
          this.buffer.write(this.newLine);
          this.buffer.write(this.indent[$times](dart.notNull(this.level) + 1));
        } else {
          this.buffer.write(" ");
        }
        this.visit(dart.dynamic, attribute);
      }
    }
    normalizeAttributes(attributes) {
      let result = attributes[$toList]();
      if (this.sortAttributes != null) {
        result[$sort](this.sortAttributes);
      }
      return result;
    }
    normalizeText(nodes) {
      let result = T.JSArrayOfXmlNodeL().of([]);
      for (let node of nodes) {
        if (T.XmlTextL().is(node)) {
          let text = node.text[$trim]()[$replaceAll](pretty_writer._whitespaceOrLineTerminators, " ");
          if (text[$isNotEmpty]) {
            if (dart.test(result[$isNotEmpty]) && T.XmlTextL().is(result[$last])) {
              result[$last] = new text$.XmlText.new(dart.notNull(result[$last].text) + " " + text);
            } else if (node.text !== text) {
              result[$add](new text$.XmlText.new(text));
            } else {
              result[$add](node);
            }
          }
        } else {
          result[$add](node);
        }
      }
      return result;
    }
  };
  (pretty_writer.XmlPrettyWriter.new = function(buffer, opts) {
    let t0, t0$, t0$0;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    let level = opts && 'level' in opts ? opts.level : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let newLine = opts && 'newLine' in opts ? opts.newLine : null;
    let preserveWhitespace = opts && 'preserveWhitespace' in opts ? opts.preserveWhitespace : null;
    let indentAttribute = opts && 'indentAttribute' in opts ? opts.indentAttribute : null;
    let sortAttributes = opts && 'sortAttributes' in opts ? opts.sortAttributes : null;
    this[pretty] = true;
    this[preserveWhitespace$] = preserveWhitespace;
    this[indentAttribute$] = indentAttribute;
    this[sortAttributes$] = sortAttributes;
    this[level$] = (t0 = level, t0 == null ? 0 : t0);
    this[indent$] = (t0$ = indent, t0$ == null ? "  " : t0$);
    this[newLine$] = (t0$0 = newLine, t0$0 == null ? "\n" : t0$0);
    pretty_writer.XmlPrettyWriter.__proto__.new.call(this, buffer, {entityMapping: entityMapping});
    ;
  }).prototype = pretty_writer.XmlPrettyWriter.prototype;
  dart.addTypeTests(pretty_writer.XmlPrettyWriter);
  dart.addTypeCaches(pretty_writer.XmlPrettyWriter);
  dart.setMethodSignature(pretty_writer.XmlPrettyWriter, () => ({
    __proto__: dart.getMethods(pretty_writer.XmlPrettyWriter.__proto__),
    normalizeAttributes: dart.fnType(dart.legacy(core.List$(dart.legacy(attribute.XmlAttribute))), [dart.legacy(core.List$(dart.legacy(attribute.XmlAttribute)))]),
    normalizeText: dart.fnType(dart.legacy(core.List$(dart.legacy(node.XmlNode))), [dart.legacy(core.List$(dart.legacy(node.XmlNode)))])
  }));
  dart.setLibraryUri(pretty_writer.XmlPrettyWriter, I[13]);
  dart.setFieldSignature(pretty_writer.XmlPrettyWriter, () => ({
    __proto__: dart.getFields(pretty_writer.XmlPrettyWriter.__proto__),
    level: dart.fieldType(dart.legacy(core.int)),
    pretty: dart.fieldType(dart.legacy(core.bool)),
    indent: dart.finalFieldType(dart.legacy(core.String)),
    newLine: dart.finalFieldType(dart.legacy(core.String)),
    preserveWhitespace: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(node.XmlNode)]))),
    indentAttribute: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(attribute.XmlAttribute)]))),
    sortAttributes: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.int), [dart.legacy(attribute.XmlAttribute), dart.legacy(attribute.XmlAttribute)])))
  }));
  dart.defineLazy(pretty_writer, {
    /*pretty_writer._whitespaceOrLineTerminators*/get _whitespaceOrLineTerminators() {
      return core.RegExp.new("\\s+");
    }
  }, true);
  var start$ = dart.privateName(descendants, "XmlDescendantsIterable.start");
  descendants.XmlDescendantsIterable = class XmlDescendantsIterable extends collection.IterableBase$(dart.legacy(node.XmlNode)) {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get iterator() {
      return new descendants.XmlDescendantsIterator.new(this.start);
    }
  };
  (descendants.XmlDescendantsIterable.new = function(start) {
    this[start$] = start;
    descendants.XmlDescendantsIterable.__proto__.new.call(this);
    ;
  }).prototype = descendants.XmlDescendantsIterable.prototype;
  dart.addTypeTests(descendants.XmlDescendantsIterable);
  dart.addTypeCaches(descendants.XmlDescendantsIterable);
  dart.setGetterSignature(descendants.XmlDescendantsIterable, () => ({
    __proto__: dart.getGetters(descendants.XmlDescendantsIterable.__proto__),
    iterator: dart.legacy(core.Iterator$(dart.legacy(node.XmlNode))),
    [$iterator]: dart.legacy(core.Iterator$(dart.legacy(node.XmlNode)))
  }));
  dart.setLibraryUri(descendants.XmlDescendantsIterable, I[14]);
  dart.setFieldSignature(descendants.XmlDescendantsIterable, () => ({
    __proto__: dart.getFields(descendants.XmlDescendantsIterable.__proto__),
    start: dart.finalFieldType(dart.legacy(node.XmlNode))
  }));
  dart.defineExtensionAccessors(descendants.XmlDescendantsIterable, ['iterator']);
  var todo = dart.privateName(descendants, "XmlDescendantsIterator.todo");
  var current = dart.privateName(descendants, "XmlDescendantsIterator.current");
  descendants.XmlDescendantsIterator = class XmlDescendantsIterator extends core.Iterator$(dart.legacy(node.XmlNode)) {
    get todo() {
      return this[todo];
    }
    set todo(value) {
      super.todo = value;
    }
    get current() {
      return this[current];
    }
    set current(value) {
      this[current] = value;
    }
    push(node) {
      this.todo[$addAll](node.children[$reversed]);
      this.todo[$addAll](node.attributes[$reversed]);
    }
    moveNext() {
      if (dart.test(this.todo[$isEmpty])) {
        this.current = null;
        return false;
      } else {
        this.current = this.todo[$removeLast]();
        this.push(this.current);
        return true;
      }
    }
  };
  (descendants.XmlDescendantsIterator.new = function(start) {
    this[todo] = T.JSArrayOfXmlNodeL().of([]);
    this[current] = null;
    this.push(start);
  }).prototype = descendants.XmlDescendantsIterator.prototype;
  dart.addTypeTests(descendants.XmlDescendantsIterator);
  dart.addTypeCaches(descendants.XmlDescendantsIterator);
  dart.setMethodSignature(descendants.XmlDescendantsIterator, () => ({
    __proto__: dart.getMethods(descendants.XmlDescendantsIterator.__proto__),
    push: dart.fnType(dart.void, [dart.legacy(node.XmlNode)]),
    moveNext: dart.fnType(dart.legacy(core.bool), [])
  }));
  dart.setLibraryUri(descendants.XmlDescendantsIterator, I[14]);
  dart.setFieldSignature(descendants.XmlDescendantsIterator, () => ({
    __proto__: dart.getFields(descendants.XmlDescendantsIterator.__proto__),
    todo: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(node.XmlNode)))),
    current: dart.fieldType(dart.legacy(node.XmlNode))
  }));
  descendants['XmlDescendantsExtension|get#descendants'] = function XmlDescendantsExtension$124get$35descendants($this) {
    return new descendants.XmlDescendantsIterable.new($this);
  };
  var _text = dart.privateName(data, "_text");
  const XmlNode_XmlHasParent$36 = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36.new = function() {
    has_parent.XmlHasParent$(dart.legacy(node.XmlNode))[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36, has_parent.XmlHasParent$(dart.legacy(node.XmlNode)));
  data.XmlData = class XmlData extends XmlNode_XmlHasParent$36 {
    get text() {
      return this[_text];
    }
    set text(text) {
      core.ArgumentError.checkNotNull(T.StringL(), text, "text");
      this[_text] = text;
    }
  };
  (data.XmlData.new = function(text) {
    this[_text] = null;
    data.XmlData.__proto__.new.call(this);
    this.text = text;
  }).prototype = data.XmlData.prototype;
  dart.addTypeTests(data.XmlData);
  dart.addTypeCaches(data.XmlData);
  dart.setSetterSignature(data.XmlData, () => ({
    __proto__: dart.getSetters(data.XmlData.__proto__),
    text: dart.legacy(core.String)
  }));
  dart.setLibraryUri(data.XmlData, I[15]);
  dart.setFieldSignature(data.XmlData, () => ({
    __proto__: dart.getFields(data.XmlData.__proto__),
    [_text]: dart.fieldType(dart.legacy(core.String))
  }));
  text$.XmlText = class XmlText extends data.XmlData {
    get nodeType() {
      return node_type.XmlNodeType.TEXT;
    }
    accept(visitor) {
      return visitor.visitText(this);
    }
  };
  (text$.XmlText.new = function(text) {
    text$.XmlText.__proto__.new.call(this, text);
    ;
  }).prototype = text$.XmlText.prototype;
  dart.addTypeTests(text$.XmlText);
  dart.addTypeCaches(text$.XmlText);
  dart.setMethodSignature(text$.XmlText, () => ({
    __proto__: dart.getMethods(text$.XmlText.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(text$.XmlText, () => ({
    __proto__: dart.getGetters(text$.XmlText.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(text$.XmlText, I[16]);
  var target$ = dart.privateName(processing, "XmlProcessing.target");
  processing.XmlProcessing = class XmlProcessing extends data.XmlData {
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.PROCESSING;
    }
    accept(visitor) {
      return visitor.visitProcessing(this);
    }
  };
  (processing.XmlProcessing.new = function(target, text) {
    this[target$] = target;
    processing.XmlProcessing.__proto__.new.call(this, text);
    ;
  }).prototype = processing.XmlProcessing.prototype;
  dart.addTypeTests(processing.XmlProcessing);
  dart.addTypeCaches(processing.XmlProcessing);
  dart.setMethodSignature(processing.XmlProcessing, () => ({
    __proto__: dart.getMethods(processing.XmlProcessing.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(processing.XmlProcessing, () => ({
    __proto__: dart.getGetters(processing.XmlProcessing.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(processing.XmlProcessing, I[17]);
  dart.setFieldSignature(processing.XmlProcessing, () => ({
    __proto__: dart.getFields(processing.XmlProcessing.__proto__),
    target: dart.finalFieldType(dart.legacy(core.String))
  }));
  var children = dart.privateName(has_children, "XmlHasChildren.children");
  has_children.XmlHasChildren = class XmlHasChildren extends core.Object {};
  has_children.XmlHasChildren[dart.mixinOn] = Object => class XmlHasChildren extends Object {
    get children() {
      return this[children];
    }
    set children(value) {
      super.children = value;
    }
    getElement(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return this.children.whereType(T.XmlElementL())[$firstWhere](name_matcher.createNameMatcher(name, namespace), {orElse: dart.fn(() => null, T.VoidToNull())});
    }
    get firstChild() {
      return dart.test(this.children.isEmpty) ? null : this.children.first;
    }
    get firstElementChild() {
      return T.XmlElementL().as(this.children.firstWhere(dart.fn(node => T.XmlElementL().is(node), T.XmlNodeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())}));
    }
    get lastChild() {
      return dart.test(this.children.isEmpty) ? null : this.children.last;
    }
    get lastElementChild() {
      return T.XmlElementL().as(this.children.lastWhere(dart.fn(node => T.XmlElementL().is(node), T.XmlNodeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())}));
    }
  };
  (has_children.XmlHasChildren[dart.mixinNew] = function() {
    this[children] = new (T.XmlNodeListOfXmlNodeL()).new();
  }).prototype = has_children.XmlHasChildren.prototype;
  dart.addTypeTests(has_children.XmlHasChildren);
  dart.addTypeCaches(has_children.XmlHasChildren);
  has_children.XmlHasChildren[dart.implements] = () => [has_children.XmlChildrenBase, core.Object];
  dart.setMethodSignature(has_children.XmlHasChildren, () => ({
    __proto__: dart.getMethods(has_children.XmlHasChildren.__proto__),
    getElement: dart.fnType(dart.legacy(element.XmlElement), [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {})
  }));
  dart.setGetterSignature(has_children.XmlHasChildren, () => ({
    __proto__: dart.getGetters(has_children.XmlHasChildren.__proto__),
    firstChild: dart.legacy(node.XmlNode),
    firstElementChild: dart.legacy(element.XmlElement),
    lastChild: dart.legacy(node.XmlNode),
    lastElementChild: dart.legacy(element.XmlElement)
  }));
  dart.setLibraryUri(has_children.XmlHasChildren, I[4]);
  dart.setFieldSignature(has_children.XmlHasChildren, () => ({
    __proto__: dart.getFields(has_children.XmlHasChildren.__proto__),
    children: dart.finalFieldType(dart.legacy(node_list.XmlNodeList$(dart.legacy(node.XmlNode))))
  }));
  const XmlNode_XmlHasChildren$36 = class XmlNode_XmlHasChildren extends node.XmlNode {};
  (XmlNode_XmlHasChildren$36.new = function() {
    has_children.XmlHasChildren[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasChildren$36.prototype;
  dart.applyMixin(XmlNode_XmlHasChildren$36, has_children.XmlHasChildren);
  document_fragment.XmlDocumentFragment = class XmlDocumentFragment extends XmlNode_XmlHasChildren$36 {
    static parse(input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : C[4] || CT.C4;
      let result = document_fragment.documentFragmentParserCache._get(entityMapping).parse(input);
      if (dart.test(result.isFailure)) {
        let lineAndColumn = token$.Token.lineAndColumnOf(result.buffer, result.position);
        dart.throw(new exceptions.XmlParserException.new(result.message, {buffer: result.buffer, position: result.position, line: lineAndColumn[$_get](0), column: lineAndColumn[$_get](1)}));
      }
      return T.XmlDocumentFragmentL().as(result.value);
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT_FRAGMENT;
    }
    accept(visitor) {
      return visitor.visitDocumentFragment(this);
    }
  };
  (document_fragment.XmlDocumentFragment.new = function(childrenIterable = C[2] || CT.C2) {
    document_fragment.XmlDocumentFragment.__proto__.new.call(this);
    this.children.initialize(this, document_fragment.childrenNodeTypes);
    this.children.addAll(childrenIterable);
  }).prototype = document_fragment.XmlDocumentFragment.prototype;
  dart.addTypeTests(document_fragment.XmlDocumentFragment);
  dart.addTypeCaches(document_fragment.XmlDocumentFragment);
  dart.setMethodSignature(document_fragment.XmlDocumentFragment, () => ({
    __proto__: dart.getMethods(document_fragment.XmlDocumentFragment.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(document_fragment.XmlDocumentFragment, () => ({
    __proto__: dart.getGetters(document_fragment.XmlDocumentFragment.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(document_fragment.XmlDocumentFragment, I[18]);
  var _name = dart.privateName(node_type, "_name");
  dart.defineLazy(document_fragment, {
    /*document_fragment.childrenNodeTypes*/get childrenNodeTypes() {
      return C[6] || CT.C6;
    },
    /*document_fragment.documentFragmentParserCache*/get documentFragmentParserCache() {
      return new (T.XmlCacheOfXmlEntityMappingL$ParserL()).new(dart.fn(entityMapping => {
        let definition = new parser$.XmlParserDefinition.new(T.XmlEntityMappingL().as(entityMapping));
        return eof['EndOfInputParserExtension|end'](dart.dynamic, definition.build(dart.dynamic, {start: dart.bind(definition, 'documentFragment')}));
      }, T.dynamicToParserL()), 5);
    }
  }, true);
  var message$ = dart.privateName(exceptions, "XmlException.message");
  exceptions.XmlException = class XmlException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      let t1;
      t1 = this.message;
      return t1 == null ? super[$toString]() : t1;
    }
  };
  (exceptions.XmlException.new = function(message = null) {
    this[message$] = message;
    ;
  }).prototype = exceptions.XmlException.prototype;
  dart.addTypeTests(exceptions.XmlException);
  dart.addTypeCaches(exceptions.XmlException);
  exceptions.XmlException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(exceptions.XmlException, () => ({
    __proto__: dart.getMethods(exceptions.XmlException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(exceptions.XmlException, I[19]);
  dart.setFieldSignature(exceptions.XmlException, () => ({
    __proto__: dart.getFields(exceptions.XmlException.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(exceptions.XmlException, ['toString']);
  var buffer$0 = dart.privateName(exceptions, "XmlParserException.buffer");
  var position$ = dart.privateName(exceptions, "XmlParserException.position");
  var line$ = dart.privateName(exceptions, "XmlParserException.line");
  var column$ = dart.privateName(exceptions, "XmlParserException.column");
  exceptions.XmlParserException = class XmlParserException extends exceptions.XmlException {
    get buffer() {
      return this[buffer$0];
    }
    set buffer(value) {
      super.buffer = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get line() {
      return this[line$];
    }
    set line(value) {
      super.line = value;
    }
    get column() {
      return this[column$];
    }
    set column(value) {
      super.column = value;
    }
    get source() {
      return this.buffer;
    }
    get offset() {
      return this.position;
    }
    toString() {
      return dart.str(super.toString()) + " at " + dart.str(this.line) + ":" + dart.str(this.column);
    }
  };
  (exceptions.XmlParserException.new = function(message, opts) {
    let buffer = opts && 'buffer' in opts ? opts.buffer : null;
    let position = opts && 'position' in opts ? opts.position : 0;
    let line = opts && 'line' in opts ? opts.line : 0;
    let column = opts && 'column' in opts ? opts.column : 0;
    this[buffer$0] = buffer;
    this[position$] = position;
    this[line$] = line;
    this[column$] = column;
    exceptions.XmlParserException.__proto__.new.call(this, message);
    ;
  }).prototype = exceptions.XmlParserException.prototype;
  dart.addTypeTests(exceptions.XmlParserException);
  dart.addTypeCaches(exceptions.XmlParserException);
  exceptions.XmlParserException[dart.implements] = () => [core.FormatException];
  dart.setGetterSignature(exceptions.XmlParserException, () => ({
    __proto__: dart.getGetters(exceptions.XmlParserException.__proto__),
    source: dart.legacy(core.String),
    offset: dart.legacy(core.int)
  }));
  dart.setLibraryUri(exceptions.XmlParserException, I[19]);
  dart.setFieldSignature(exceptions.XmlParserException, () => ({
    __proto__: dart.getFields(exceptions.XmlParserException.__proto__),
    buffer: dart.finalFieldType(dart.legacy(core.String)),
    position: dart.finalFieldType(dart.legacy(core.int)),
    line: dart.finalFieldType(dart.legacy(core.int)),
    column: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(exceptions.XmlParserException, ['toString']);
  exceptions.XmlNodeTypeException = class XmlNodeTypeException extends exceptions.XmlException {
    static checkNotNull(node) {
      if (node == null) {
        dart.throw(new exceptions.XmlNodeTypeException.new("Node must not be null."));
      }
    }
    static checkValidType(node, types) {
      if (!dart.test(types[$contains](node.nodeType))) {
        dart.throw(new exceptions.XmlNodeTypeException.new("Expected node of type: " + dart.str(types)));
      }
    }
  };
  (exceptions.XmlNodeTypeException.new = function(message) {
    exceptions.XmlNodeTypeException.__proto__.new.call(this, message);
    ;
  }).prototype = exceptions.XmlNodeTypeException.prototype;
  dart.addTypeTests(exceptions.XmlNodeTypeException);
  dart.addTypeCaches(exceptions.XmlNodeTypeException);
  dart.setLibraryUri(exceptions.XmlNodeTypeException, I[19]);
  exceptions.XmlParentException = class XmlParentException extends exceptions.XmlException {
    static checkNoParent(node) {
      if (node.parent != null) {
        dart.throw(new exceptions.XmlParentException.new("Node already has a parent, copy or remove it first: " + dart.str(node)));
      }
    }
    static checkMatchingParent(node, parent) {
      if (!dart.equals(node.parent, parent)) {
        dart.throw(new exceptions.XmlParentException.new("Node already has a non-matching parent: " + dart.str(node)));
      }
    }
  };
  (exceptions.XmlParentException.new = function(message) {
    exceptions.XmlParentException.__proto__.new.call(this, message);
    ;
  }).prototype = exceptions.XmlParentException.prototype;
  dart.addTypeTests(exceptions.XmlParentException);
  dart.addTypeCaches(exceptions.XmlParentException);
  dart.setLibraryUri(exceptions.XmlParentException, I[19]);
  exceptions.XmlTagException = class XmlTagException extends exceptions.XmlException {
    static checkClosingTag(expected, actual) {
      if (expected != actual) {
        dart.throw(exceptions.XmlTagException.mismatchClosingTag(expected, actual));
      }
    }
    static mismatchClosingTag(expectedName, actualName) {
      return new exceptions.XmlTagException.new("Expected closing tag </" + dart.str(expectedName) + ">, " + "but found </" + dart.str(actualName) + ">.");
    }
    static unexpectedClosingTag(name) {
      return new exceptions.XmlTagException.new("Unexpected closing tag </" + dart.str(name) + ">.");
    }
    static missingClosingTag(name) {
      return new exceptions.XmlTagException.new("Missing closing tag </" + dart.str(name) + ">.");
    }
  };
  (exceptions.XmlTagException.new = function(message) {
    exceptions.XmlTagException.__proto__.new.call(this, message);
    ;
  }).prototype = exceptions.XmlTagException.prototype;
  dart.addTypeTests(exceptions.XmlTagException);
  dart.addTypeCaches(exceptions.XmlTagException);
  dart.setLibraryUri(exceptions.XmlTagException, I[19]);
  const _is_XmlGrammarDefinition_default = Symbol('_is_XmlGrammarDefinition_default');
  grammar.XmlGrammarDefinition$ = dart.generic((TNode, TName) => {
    var TNodeL = () => (TNodeL = dart.constFn(dart.legacy(TNode)))();
    var dynamicToTNodeL = () => (dynamicToTNodeL = dart.constFn(dart.fnType(TNodeL(), [dart.dynamic])))();
    var IterableOfTNodeL = () => (IterableOfTNodeL = dart.constFn(core.Iterable$(TNodeL())))();
    var IterableLOfTNodeL = () => (IterableLOfTNodeL = dart.constFn(dart.legacy(IterableOfTNodeL())))();
    var JSArrayOfTNodeL = () => (JSArrayOfTNodeL = dart.constFn(_interceptors.JSArray$(TNodeL())))();
    var TNameL = () => (TNameL = dart.constFn(dart.legacy(TName)))();
    class XmlGrammarDefinition extends production.XmlProductionDefinition {
      attribute() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.attribute(), dart.fn(each => this.createAttribute(TNameL().as(dart.dsend(each, '_get', [0])), T.StringL().as(dart.dsend(dart.dsend(each, '_get', [4]), '_get', [0])), T.XmlAttributeTypeL().as(dart.dsend(dart.dsend(each, '_get', [4]), '_get', [1]))), dynamicToTNodeL()));
      }
      attributeValueDouble() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.attributeValueDouble(), dart.fn(each => [dart.dsend(each, '_get', [1]), attribute_type.XmlAttributeType.DOUBLE_QUOTE], T.dynamicToListL()));
      }
      attributeValueSingle() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.attributeValueSingle(), dart.fn(each => [dart.dsend(each, '_get', [1]), attribute_type.XmlAttributeType.SINGLE_QUOTE], T.dynamicToListL()));
      }
      comment() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.comment(), dart.fn(each => this.createComment(T.StringL().as(dart.dsend(each, '_get', [1]))), dynamicToTNodeL()));
      }
      declaration() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.declaration(), dart.fn(each => this.createDeclaration(IterableLOfTNodeL().as(dart.dgsend(dart.dsend(each, '_get', [1]), [TNodeL()], 'cast', []))), dynamicToTNodeL()));
      }
      cdata() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.cdata(), dart.fn(each => this.createCDATA(T.StringL().as(dart.dsend(each, '_get', [1]))), dynamicToTNodeL()));
      }
      doctype() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.doctype(), dart.fn(each => this.createDoctype(T.StringL().as(dart.dsend(each, '_get', [2]))), dynamicToTNodeL()));
      }
      document() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.document(), dart.fn(each => {
          let nodes = [];
          if (dart.dsend(each, '_get', [0]) != null) {
            nodes[$add](dart.dsend(each, '_get', [0]));
          }
          nodes[$addAll](T.IterableL().as(dart.dsend(each, '_get', [1])));
          if (dart.dsend(each, '_get', [2]) != null) {
            nodes[$add](dart.dsend(each, '_get', [2]));
          }
          nodes[$addAll](T.IterableL().as(dart.dsend(each, '_get', [3])));
          nodes[$add](dart.dsend(each, '_get', [4]));
          nodes[$addAll](T.IterableL().as(dart.dsend(each, '_get', [5])));
          return this.createDocument(nodes[$cast](TNodeL()));
        }, dynamicToTNodeL()));
      }
      documentFragment() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.documentFragment(), dart.fn(nodes => this.createDocumentFragment(IterableLOfTNodeL().as(dart.dgsend(nodes, [TNodeL()], 'cast', []))), dynamicToTNodeL()));
      }
      element() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.element(), dart.fn(list => {
          let name = TNameL().as(dart.dsend(list, '_get', [1]));
          let attributes = dart.dgsend(dart.dsend(list, '_get', [2]), [TNodeL()], 'cast', []);
          if (dart.equals(dart.dsend(list, '_get', [4]), "/>")) {
            return this.createElement(name, IterableLOfTNodeL().as(attributes), JSArrayOfTNodeL().of([]), true);
          } else {
            if (dart.equals(dart.dsend(list, '_get', [1]), dart.dsend(dart.dsend(list, '_get', [4]), '_get', [3]))) {
              let children = dart.dgsend(dart.dsend(dart.dsend(list, '_get', [4]), '_get', [1]), [TNodeL()], 'cast', []);
              return this.createElement(name, IterableLOfTNodeL().as(attributes), IterableLOfTNodeL().as(children), T.boolL().as(dart.dload(children, 'isNotEmpty')));
            } else {
              let token = T.TokenL().as(dart.dsend(dart.dsend(list, '_get', [4]), '_get', [2]));
              let lineAndColumn = token$.Token.lineAndColumnOf(token.buffer, token.start);
              dart.throw(new exceptions.XmlParserException.new("Expected </" + dart.str(dart.dsend(list, '_get', [1])) + ">, but found </" + dart.str(dart.dsend(dart.dsend(list, '_get', [4]), '_get', [3])) + ">", {buffer: token.buffer, position: token.start, line: lineAndColumn[$_get](0), column: lineAndColumn[$_get](1)}));
            }
          }
        }, dynamicToTNodeL()));
      }
      processing() {
        return map['MapParserExtension|map'](dart.dynamic, dart.dynamic, super.processing(), dart.fn(each => this.createProcessing(T.StringL().as(dart.dsend(each, '_get', [1])), T.StringL().as(dart.dsend(each, '_get', [2]))), dynamicToTNodeL()));
      }
      qualified() {
        return map['MapParserExtension|map'](T.StringL(), dart.dynamic, cast['CastParserExtension|cast'](dart.dynamic, T.StringL(), super.qualified()), dart.bind(this, 'createQualified'));
      }
      characterData() {
        return map['MapParserExtension|map'](T.StringL(), dart.dynamic, cast['CastParserExtension|cast'](dart.dynamic, T.StringL(), super.characterData()), dart.bind(this, 'createText'));
      }
      spaceText() {
        return map['MapParserExtension|map'](T.StringL(), dart.dynamic, cast['CastParserExtension|cast'](dart.dynamic, T.StringL(), super.spaceText()), dart.bind(this, 'createText'));
      }
    }
    (XmlGrammarDefinition.new = function(entityMapping) {
      XmlGrammarDefinition.__proto__.new.call(this, entityMapping);
      ;
    }).prototype = XmlGrammarDefinition.prototype;
    dart.addTypeTests(XmlGrammarDefinition);
    XmlGrammarDefinition.prototype[_is_XmlGrammarDefinition_default] = true;
    dart.addTypeCaches(XmlGrammarDefinition);
    dart.setLibraryUri(XmlGrammarDefinition, I[20]);
    return XmlGrammarDefinition;
  });
  grammar.XmlGrammarDefinition = grammar.XmlGrammarDefinition$();
  dart.addTypeTests(grammar.XmlGrammarDefinition, _is_XmlGrammarDefinition_default);
  parser$.XmlParserDefinition = class XmlParserDefinition extends grammar.XmlGrammarDefinition$(dart.legacy(node.XmlNode), dart.legacy(name$.XmlName)) {
    createAttribute(name, text, type) {
      T.XmlNameL().as(name);
      return new attribute.XmlAttribute.new(name, text, type);
    }
    createComment(text) {
      return new comment.XmlComment.new(text);
    }
    createCDATA(text) {
      return new cdata.XmlCDATA.new(text);
    }
    createDeclaration(attributes) {
      T.IterableLOfXmlNodeL().as(attributes);
      return new declaration.XmlDeclaration.new(attributes[$cast](T.XmlAttributeL()));
    }
    createDoctype(text) {
      return new doctype.XmlDoctype.new(text);
    }
    createDocument(children) {
      T.IterableLOfXmlNodeL().as(children);
      return new document.XmlDocument.new(children);
    }
    createDocumentFragment(children) {
      T.IterableLOfXmlNodeL().as(children);
      return new document_fragment.XmlDocumentFragment.new(children);
    }
    createElement(name, attributes, children, isSelfClosing = true) {
      T.XmlNameL().as(name);
      T.IterableLOfXmlNodeL().as(attributes);
      T.IterableLOfXmlNodeL().as(children);
      return new element.XmlElement.new(name, attributes[$cast](T.XmlAttributeL()), children, isSelfClosing);
    }
    createProcessing(target, text) {
      return new processing.XmlProcessing.new(target, text);
    }
    createQualified(name) {
      return name$.XmlName.fromString(name);
    }
    createText(text) {
      return new text$.XmlText.new(text);
    }
  };
  (parser$.XmlParserDefinition.new = function(entityMapping) {
    parser$.XmlParserDefinition.__proto__.new.call(this, entityMapping);
    ;
  }).prototype = parser$.XmlParserDefinition.prototype;
  dart.addTypeTests(parser$.XmlParserDefinition);
  dart.addTypeCaches(parser$.XmlParserDefinition);
  dart.setMethodSignature(parser$.XmlParserDefinition, () => ({
    __proto__: dart.getMethods(parser$.XmlParserDefinition.__proto__),
    createAttribute: dart.fnType(dart.legacy(attribute.XmlAttribute), [dart.legacy(core.Object), dart.legacy(core.String), dart.legacy(attribute_type.XmlAttributeType)]),
    createComment: dart.fnType(dart.legacy(comment.XmlComment), [dart.legacy(core.String)]),
    createCDATA: dart.fnType(dart.legacy(cdata.XmlCDATA), [dart.legacy(core.String)]),
    createDeclaration: dart.fnType(dart.legacy(declaration.XmlDeclaration), [dart.legacy(core.Object)]),
    createDoctype: dart.fnType(dart.legacy(doctype.XmlDoctype), [dart.legacy(core.String)]),
    createDocument: dart.fnType(dart.legacy(document.XmlDocument), [dart.legacy(core.Object)]),
    createDocumentFragment: dart.fnType(dart.legacy(node.XmlNode), [dart.legacy(core.Object)]),
    createElement: dart.fnType(dart.legacy(element.XmlElement), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.Object)], [dart.legacy(core.bool)]),
    createProcessing: dart.fnType(dart.legacy(processing.XmlProcessing), [dart.legacy(core.String), dart.legacy(core.String)]),
    createQualified: dart.fnType(dart.legacy(name$.XmlName), [dart.legacy(core.String)]),
    createText: dart.fnType(dart.legacy(text$.XmlText), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(parser$.XmlParserDefinition, I[21]);
  var isSelfClosing$ = dart.privateName(element, "XmlElement.isSelfClosing");
  var name$0 = dart.privateName(element, "XmlElement.name");
  has_name.XmlHasName = class XmlHasName extends core.Object {};
  has_name.XmlHasName[dart.mixinOn] = Object => class XmlHasName extends Object {};
  (has_name.XmlHasName[dart.mixinNew] = function() {
  }).prototype = has_name.XmlHasName.prototype;
  dart.addTypeTests(has_name.XmlHasName);
  dart.addTypeCaches(has_name.XmlHasName);
  has_name.XmlHasName[dart.implements] = () => [core.Object];
  dart.setLibraryUri(has_name.XmlHasName, I[22]);
  var attributes = dart.privateName(has_attributes, "XmlHasAttributes.attributes");
  has_attributes.XmlHasAttributes = class XmlHasAttributes extends core.Object {};
  has_attributes.XmlHasAttributes[dart.mixinOn] = Object => class XmlHasAttributes extends Object {
    get attributes() {
      return this[attributes];
    }
    set attributes(value) {
      super.attributes = value;
    }
    getAttribute(name, opts) {
      let t1;
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      t1 = this.getAttributeNode(name, {namespace: namespace});
      return t1 == null ? null : t1.value;
    }
    getAttributeNode(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return this.attributes.firstWhere(name_matcher.createNameMatcher(name, namespace), {orElse: dart.fn(() => null, T.VoidToNull())});
    }
    setAttribute(name, value, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let index = this.attributes.indexWhere(name_matcher.createNameMatcher(name, namespace));
      if (dart.notNull(index) < 0) {
        if (value != null) {
          let prefix = namespace == null ? null : namespace$.lookupNamespacePrefix(T.XmlNodeL().as(this), namespace);
          this.attributes.add(new attribute.XmlAttribute.new(name$.XmlName.new(name, prefix), value));
        }
      } else {
        if (value != null) {
          this.attributes._get(index).value = value;
        } else {
          this.attributes.removeAt(index);
        }
      }
    }
  };
  (has_attributes.XmlHasAttributes[dart.mixinNew] = function() {
    this[attributes] = new (T.XmlNodeListOfXmlAttributeL()).new();
  }).prototype = has_attributes.XmlHasAttributes.prototype;
  dart.addTypeTests(has_attributes.XmlHasAttributes);
  dart.addTypeCaches(has_attributes.XmlHasAttributes);
  has_attributes.XmlHasAttributes[dart.implements] = () => [has_attributes.XmlAttributesBase, core.Object];
  dart.setMethodSignature(has_attributes.XmlHasAttributes, () => ({
    __proto__: dart.getMethods(has_attributes.XmlHasAttributes.__proto__),
    getAttribute: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {}),
    getAttributeNode: dart.fnType(dart.legacy(attribute.XmlAttribute), [dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {}),
    setAttribute: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String)], {namespace: dart.legacy(core.String)}, {})
  }));
  dart.setLibraryUri(has_attributes.XmlHasAttributes, I[3]);
  dart.setFieldSignature(has_attributes.XmlHasAttributes, () => ({
    __proto__: dart.getFields(has_attributes.XmlHasAttributes.__proto__),
    attributes: dart.finalFieldType(dart.legacy(node_list.XmlNodeList$(dart.legacy(attribute.XmlAttribute))))
  }));
  const XmlNode_XmlHasParent$36$ = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36$.new = function() {
    has_parent.XmlHasParent$(dart.legacy(node.XmlNode))[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$, has_parent.XmlHasParent$(dart.legacy(node.XmlNode)));
  const XmlNode_XmlHasName$36 = class XmlNode_XmlHasName extends XmlNode_XmlHasParent$36$ {};
  (XmlNode_XmlHasName$36.new = function() {
    XmlNode_XmlHasName$36.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasName$36.prototype;
  dart.applyMixin(XmlNode_XmlHasName$36, has_name.XmlHasName);
  const XmlNode_XmlHasAttributes$36 = class XmlNode_XmlHasAttributes extends XmlNode_XmlHasName$36 {};
  (XmlNode_XmlHasAttributes$36.new = function() {
    has_attributes.XmlHasAttributes[dart.mixinNew].call(this);
    XmlNode_XmlHasAttributes$36.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasAttributes$36.prototype;
  dart.applyMixin(XmlNode_XmlHasAttributes$36, has_attributes.XmlHasAttributes);
  const XmlNode_XmlHasChildren$36$ = class XmlNode_XmlHasChildren extends XmlNode_XmlHasAttributes$36 {};
  (XmlNode_XmlHasChildren$36$.new = function() {
    has_children.XmlHasChildren[dart.mixinNew].call(this);
    XmlNode_XmlHasChildren$36$.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasChildren$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasChildren$36$, has_children.XmlHasChildren);
  element.XmlElement = class XmlElement extends XmlNode_XmlHasChildren$36$ {
    get isSelfClosing() {
      return this[isSelfClosing$];
    }
    set isSelfClosing(value) {
      this[isSelfClosing$] = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.ELEMENT;
    }
    accept(visitor) {
      return visitor.visitElement(this);
    }
  };
  (element.XmlElement.new = function(name, attributesIterable = C[1] || CT.C1, childrenIterable = C[2] || CT.C2, isSelfClosing = true) {
    this[name$0] = name;
    this[isSelfClosing$] = isSelfClosing;
    element.XmlElement.__proto__.new.call(this);
    this.name.attachParent(this);
    this.attributes.initialize(this, element.attributeNodeTypes);
    this.attributes.addAll(attributesIterable);
    this.children.initialize(this, element.childrenNodeTypes);
    this.children.addAll(childrenIterable);
  }).prototype = element.XmlElement.prototype;
  dart.addTypeTests(element.XmlElement);
  dart.addTypeCaches(element.XmlElement);
  dart.setMethodSignature(element.XmlElement, () => ({
    __proto__: dart.getMethods(element.XmlElement.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(element.XmlElement, () => ({
    __proto__: dart.getGetters(element.XmlElement.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(element.XmlElement, I[23]);
  dart.setFieldSignature(element.XmlElement, () => ({
    __proto__: dart.getFields(element.XmlElement.__proto__),
    isSelfClosing: dart.fieldType(dart.legacy(core.bool)),
    name: dart.finalFieldType(dart.legacy(name$.XmlName))
  }));
  dart.defineLazy(element, {
    /*element.childrenNodeTypes*/get childrenNodeTypes() {
      return C[14] || CT.C14;
    },
    /*element.attributeNodeTypes*/get attributeNodeTypes() {
      return C[15] || CT.C15;
    }
  }, true);
  const XmlNode_XmlHasChildren$36$0 = class XmlNode_XmlHasChildren extends node.XmlNode {};
  (XmlNode_XmlHasChildren$36$0.new = function() {
    has_children.XmlHasChildren[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasChildren$36$0.prototype;
  dart.applyMixin(XmlNode_XmlHasChildren$36$0, has_children.XmlHasChildren);
  document.XmlDocument = class XmlDocument extends XmlNode_XmlHasChildren$36$0 {
    static parse(input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : C[4] || CT.C4;
      let result = document.documentParserCache._get(entityMapping).parse(input);
      if (dart.test(result.isFailure)) {
        let lineAndColumn = token$.Token.lineAndColumnOf(result.buffer, result.position);
        dart.throw(new exceptions.XmlParserException.new(result.message, {buffer: result.buffer, position: result.position, line: lineAndColumn[$_get](0), column: lineAndColumn[$_get](1)}));
      }
      return T.XmlDocumentL().as(result.value);
    }
    get declaration() {
      return T.XmlDeclarationL().as(this.children.firstWhere(dart.fn(node => T.XmlDeclarationL().is(node), T.XmlNodeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())}));
    }
    get doctypeElement() {
      return T.XmlDoctypeL().as(this.children.firstWhere(dart.fn(node => T.XmlDoctypeL().is(node), T.XmlNodeLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())}));
    }
    get rootElement() {
      return T.XmlElementL().as(this.children.firstWhere(dart.fn(node => T.XmlElementL().is(node), T.XmlNodeLToboolL()), {orElse: dart.fn(() => dart.throw(new core.StateError.new("Empty XML document")), T.VoidTobottom())}));
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT;
    }
    accept(visitor) {
      return visitor.visitDocument(this);
    }
  };
  (document.XmlDocument.new = function(childrenIterable = C[2] || CT.C2) {
    document.XmlDocument.__proto__.new.call(this);
    this.children.initialize(this, document.childrenNodeTypes);
    this.children.addAll(childrenIterable);
  }).prototype = document.XmlDocument.prototype;
  dart.addTypeTests(document.XmlDocument);
  dart.addTypeCaches(document.XmlDocument);
  dart.setMethodSignature(document.XmlDocument, () => ({
    __proto__: dart.getMethods(document.XmlDocument.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(document.XmlDocument, () => ({
    __proto__: dart.getGetters(document.XmlDocument.__proto__),
    declaration: dart.legacy(declaration.XmlDeclaration),
    doctypeElement: dart.legacy(doctype.XmlDoctype),
    rootElement: dart.legacy(element.XmlElement),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(document.XmlDocument, I[24]);
  dart.defineLazy(document, {
    /*document.childrenNodeTypes*/get childrenNodeTypes() {
      return C[6] || CT.C6;
    },
    /*document.documentParserCache*/get documentParserCache() {
      return new (T.XmlCacheOfXmlEntityMappingL$ParserL()).new(dart.fn(entityMapping => new parser$.XmlParserDefinition.new(T.XmlEntityMappingL().as(entityMapping)).build(dart.dynamic), T.dynamicToParserL()), 5);
    }
  }, true);
  doctype.XmlDoctype = class XmlDoctype extends data.XmlData {
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT_TYPE;
    }
    accept(visitor) {
      return visitor.visitDoctype(this);
    }
  };
  (doctype.XmlDoctype.new = function(text) {
    doctype.XmlDoctype.__proto__.new.call(this, text);
    ;
  }).prototype = doctype.XmlDoctype.prototype;
  dart.addTypeTests(doctype.XmlDoctype);
  dart.addTypeCaches(doctype.XmlDoctype);
  dart.setMethodSignature(doctype.XmlDoctype, () => ({
    __proto__: dart.getMethods(doctype.XmlDoctype.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(doctype.XmlDoctype, () => ({
    __proto__: dart.getGetters(doctype.XmlDoctype.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(doctype.XmlDoctype, I[25]);
  const XmlNode_XmlHasParent$36$0 = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36$0.new = function() {
    has_parent.XmlHasParent$(dart.legacy(node.XmlNode))[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$0.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$0, has_parent.XmlHasParent$(dart.legacy(node.XmlNode)));
  const XmlNode_XmlHasAttributes$36$ = class XmlNode_XmlHasAttributes extends XmlNode_XmlHasParent$36$0 {};
  (XmlNode_XmlHasAttributes$36$.new = function() {
    has_attributes.XmlHasAttributes[dart.mixinNew].call(this);
    XmlNode_XmlHasAttributes$36$.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasAttributes$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasAttributes$36$, has_attributes.XmlHasAttributes);
  declaration.XmlDeclaration = class XmlDeclaration extends XmlNode_XmlHasAttributes$36$ {
    get version() {
      return this.getAttribute("version");
    }
    set version(value) {
      return this.setAttribute("version", value);
    }
    get encoding() {
      return this.getAttribute("encoding");
    }
    set encoding(value) {
      return this.setAttribute("encoding", value);
    }
    get standalone() {
      return this.getAttribute("standalone") === "yes";
    }
    set standalone(value) {
      return this.setAttribute("standalone", value == null ? null : dart.test(value) ? "yes" : "no");
    }
    get nodeType() {
      return node_type.XmlNodeType.DECLARATION;
    }
    accept(visitor) {
      return visitor.visitDeclaration(this);
    }
  };
  (declaration.XmlDeclaration.new = function(attributesIterable = C[1] || CT.C1) {
    declaration.XmlDeclaration.__proto__.new.call(this);
    this.attributes.initialize(this, declaration.attributeNodeTypes);
    this.attributes.addAll(attributesIterable);
  }).prototype = declaration.XmlDeclaration.prototype;
  dart.addTypeTests(declaration.XmlDeclaration);
  dart.addTypeCaches(declaration.XmlDeclaration);
  dart.setMethodSignature(declaration.XmlDeclaration, () => ({
    __proto__: dart.getMethods(declaration.XmlDeclaration.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(declaration.XmlDeclaration, () => ({
    __proto__: dart.getGetters(declaration.XmlDeclaration.__proto__),
    version: dart.legacy(core.String),
    encoding: dart.legacy(core.String),
    standalone: dart.legacy(core.bool),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setSetterSignature(declaration.XmlDeclaration, () => ({
    __proto__: dart.getSetters(declaration.XmlDeclaration.__proto__),
    version: dart.legacy(core.String),
    encoding: dart.legacy(core.String),
    standalone: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(declaration.XmlDeclaration, I[26]);
  dart.defineLazy(declaration, {
    /*declaration.attributeNodeTypes*/get attributeNodeTypes() {
      return C[15] || CT.C15;
    },
    /*declaration.versionAttribute*/get versionAttribute() {
      return "version";
    },
    /*declaration.encodingAttribute*/get encodingAttribute() {
      return "encoding";
    },
    /*declaration.standaloneAttribute*/get standaloneAttribute() {
      return "standalone";
    }
  }, true);
  comment.XmlComment = class XmlComment extends data.XmlData {
    get nodeType() {
      return node_type.XmlNodeType.COMMENT;
    }
    accept(visitor) {
      return visitor.visitComment(this);
    }
  };
  (comment.XmlComment.new = function(text) {
    comment.XmlComment.__proto__.new.call(this, text);
    ;
  }).prototype = comment.XmlComment.prototype;
  dart.addTypeTests(comment.XmlComment);
  dart.addTypeCaches(comment.XmlComment);
  dart.setMethodSignature(comment.XmlComment, () => ({
    __proto__: dart.getMethods(comment.XmlComment.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(comment.XmlComment, () => ({
    __proto__: dart.getGetters(comment.XmlComment.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(comment.XmlComment, I[27]);
  cdata.XmlCDATA = class XmlCDATA extends data.XmlData {
    get nodeType() {
      return node_type.XmlNodeType.CDATA;
    }
    accept(visitor) {
      return visitor.visitCDATA(this);
    }
  };
  (cdata.XmlCDATA.new = function(text) {
    cdata.XmlCDATA.__proto__.new.call(this, text);
    ;
  }).prototype = cdata.XmlCDATA.prototype;
  dart.addTypeTests(cdata.XmlCDATA);
  dart.addTypeCaches(cdata.XmlCDATA);
  dart.setMethodSignature(cdata.XmlCDATA, () => ({
    __proto__: dart.getMethods(cdata.XmlCDATA.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(cdata.XmlCDATA, () => ({
    __proto__: dart.getGetters(cdata.XmlCDATA.__proto__),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setLibraryUri(cdata.XmlCDATA, I[28]);
  const Object_XmlVisitor$36$ = class Object_XmlVisitor extends core.Object {};
  (Object_XmlVisitor$36$.new = function() {
  }).prototype = Object_XmlVisitor$36$.prototype;
  dart.applyMixin(Object_XmlVisitor$36$, visitor.XmlVisitor);
  transformer.XmlTransformer = class XmlTransformer extends Object_XmlVisitor$36$ {
    visitAttribute(node) {
      return new attribute.XmlAttribute.new(this.visit(T.XmlNameL(), node.name), node.value, node.attributeType);
    }
    visitCDATA(node) {
      return new cdata.XmlCDATA.new(node.text);
    }
    visitComment(node) {
      return new comment.XmlComment.new(node.text);
    }
    visitDeclaration(node) {
      return new declaration.XmlDeclaration.new(node.attributes.map(T.XmlAttributeL(), dart.gbind(dart.bind(this, 'visit'), T.XmlAttributeL())));
    }
    visitDoctype(node) {
      return new doctype.XmlDoctype.new(node.text);
    }
    visitDocument(node) {
      return new document.XmlDocument.new(node.children.map(T.XmlNodeL(), dart.gbind(dart.bind(this, 'visit'), T.XmlNodeL())));
    }
    visitDocumentFragment(node) {
      return new document_fragment.XmlDocumentFragment.new(node.children.map(T.XmlNodeL(), dart.gbind(dart.bind(this, 'visit'), T.XmlNodeL())));
    }
    visitElement(node) {
      return new element.XmlElement.new(this.visit(T.XmlNameL(), node.name), node.attributes.map(T.XmlAttributeL(), dart.gbind(dart.bind(this, 'visit'), T.XmlAttributeL())), node.children.map(T.XmlNodeL(), dart.gbind(dart.bind(this, 'visit'), T.XmlNodeL())), node.isSelfClosing);
    }
    visitName(name) {
      return name$.XmlName.fromString(name.qualified);
    }
    visitProcessing(node) {
      return new processing.XmlProcessing.new(node.target, node.text);
    }
    visitText(node) {
      return new text$.XmlText.new(node.text);
    }
  };
  (transformer.XmlTransformer.new = function() {
    ;
  }).prototype = transformer.XmlTransformer.prototype;
  dart.addTypeTests(transformer.XmlTransformer);
  dart.addTypeCaches(transformer.XmlTransformer);
  dart.setMethodSignature(transformer.XmlTransformer, () => ({
    __proto__: dart.getMethods(transformer.XmlTransformer.__proto__),
    visitAttribute: dart.fnType(dart.legacy(attribute.XmlAttribute), [dart.legacy(attribute.XmlAttribute)]),
    visitCDATA: dart.fnType(dart.legacy(cdata.XmlCDATA), [dart.legacy(cdata.XmlCDATA)]),
    visitComment: dart.fnType(dart.legacy(comment.XmlComment), [dart.legacy(comment.XmlComment)]),
    visitDeclaration: dart.fnType(dart.legacy(declaration.XmlDeclaration), [dart.legacy(declaration.XmlDeclaration)]),
    visitDoctype: dart.fnType(dart.legacy(doctype.XmlDoctype), [dart.legacy(doctype.XmlDoctype)]),
    visitDocument: dart.fnType(dart.legacy(document.XmlDocument), [dart.legacy(document.XmlDocument)]),
    visitDocumentFragment: dart.fnType(dart.legacy(document_fragment.XmlDocumentFragment), [dart.legacy(document_fragment.XmlDocumentFragment)]),
    visitElement: dart.fnType(dart.legacy(element.XmlElement), [dart.legacy(element.XmlElement)]),
    visitName: dart.fnType(dart.legacy(name$.XmlName), [dart.legacy(name$.XmlName)]),
    visitProcessing: dart.fnType(dart.legacy(processing.XmlProcessing), [dart.legacy(processing.XmlProcessing)]),
    visitText: dart.fnType(dart.legacy(text$.XmlText), [dart.legacy(text$.XmlText)])
  }));
  dart.setLibraryUri(transformer.XmlTransformer, I[29]);
  dart.defineLazy(transformer.XmlTransformer, {
    /*transformer.XmlTransformer.defaultInstance*/get defaultInstance() {
      return new transformer.XmlTransformer.new();
    }
  }, true);
  transformer['XmlTransformerExtension|copy'] = function XmlTransformerExtension$124copy($this) {
    return transformer.XmlTransformer.defaultInstance.visit(T.XmlNodeL(), $this);
  };
  transformer['XmlTransformerExtension|get#copy'] = function XmlTransformerExtension$124get$35copy($this) {
    return dart.fn(() => transformer['XmlTransformerExtension|copy']($this), T.VoidToXmlNodeL());
  };
  var _parent$ = dart.privateName(node_list, "_parent");
  var _nodeTypes = dart.privateName(node_list, "_nodeTypes");
  var _expandFragment = dart.privateName(node_list, "_expandFragment");
  var _expandNodes = dart.privateName(node_list, "_expandNodes");
  const _is_XmlNodeList_default = Symbol('_is_XmlNodeList_default');
  node_list.XmlNodeList$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var JSArrayOfEL = () => (JSArrayOfEL = dart.constFn(_interceptors.JSArray$(EL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    var ELToboolL = () => (ELToboolL = dart.constFn(dart.fnType(T.boolL(), [EL()])))();
    var XmlNodeLToEL = () => (XmlNodeLToEL = dart.constFn(dart.fnType(EL(), [T.XmlNodeL()])))();
    class XmlNodeList extends wrappers.DelegatingList$(dart.legacy(E)) {
      initialize(parent, nodeTypes) {
        this[_parent$] = parent;
        this[_nodeTypes] = nodeTypes;
      }
      _set(index, value$) {
        let value = value$;
        EL().as(value);
        exceptions.XmlNodeTypeException.checkNotNull(value);
        core.RangeError.checkValidIndex(index, this);
        if (value.nodeType == node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
          this.replaceRange(index, dart.notNull(index) + 1, this[_expandFragment](value));
        } else {
          exceptions.XmlNodeTypeException.checkValidType(value, this[_nodeTypes]);
          exceptions.XmlParentException.checkNoParent(value);
          this._get(index).detachParent(this[_parent$]);
          super._set(index, value);
          value.attachParent(this[_parent$]);
        }
        return value$;
      }
      set length(length) {
        return dart.throw(new core.UnsupportedError.new("Unsupported length change of node list."));
      }
      get length() {
        return super.length;
      }
      add(value) {
        EL().as(value);
        exceptions.XmlNodeTypeException.checkNotNull(value);
        if (value.nodeType == node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
          this.addAll(this[_expandFragment](value));
        } else {
          exceptions.XmlNodeTypeException.checkValidType(value, this[_nodeTypes]);
          exceptions.XmlParentException.checkNoParent(value);
          super.add(value);
          value.attachParent(this[_parent$]);
        }
      }
      addAll(iterable) {
        IterableLOfEL().as(iterable);
        let expanded = this[_expandNodes](iterable);
        super.addAll(expanded);
        for (let node of expanded) {
          node.attachParent(this[_parent$]);
        }
      }
      remove(value) {
        let removed = super.remove(value);
        if (dart.test(removed)) {
          let node = EL().as(value);
          node.detachParent(this[_parent$]);
        }
        return removed;
      }
      removeWhere(test) {
        super.removeWhere(dart.fn(node => {
          let remove = test(node);
          if (dart.test(remove)) {
            node.detachParent(this[_parent$]);
          }
          return remove;
        }, ELToboolL()));
      }
      retainWhere(test) {
        super.retainWhere(dart.fn(node => {
          let retain = test(node);
          if (!dart.test(retain)) {
            node.detachParent(this[_parent$]);
          }
          return retain;
        }, ELToboolL()));
      }
      clear() {
        for (let node of this) {
          node.detachParent(this[_parent$]);
        }
        super.clear();
      }
      removeLast() {
        let node = super.removeLast();
        node.detachParent(this[_parent$]);
        return node;
      }
      removeRange(start, end) {
        core.RangeError.checkValidRange(start, end, this.length);
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this._get(i).detachParent(this[_parent$]);
        }
        super.removeRange(start, end);
      }
      fillRange(start, end, fillValue = null) {
        EL().as(fillValue);
        return dart.throw(new core.UnsupportedError.new("Unsupported range filling of node list."));
      }
      setRange(start, end, iterable, skipCount = 0) {
        IterableLOfEL().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        let expanded = this[_expandNodes](iterable);
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this._get(i).detachParent(this[_parent$]);
        }
        super.setRange(start, end, expanded, skipCount);
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this._get(i).attachParent(this[_parent$]);
        }
      }
      replaceRange(start, end, iterable) {
        IterableLOfEL().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        let expanded = this[_expandNodes](iterable);
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this._get(i).detachParent(this[_parent$]);
        }
        super.replaceRange(start, end, expanded);
        for (let node of expanded) {
          node.attachParent(this[_parent$]);
        }
      }
      setAll(index, iterable) {
        IterableLOfEL().as(iterable);
        return dart.throw(new core.UnimplementedError.new());
      }
      insert(index, element) {
        EL().as(element);
        exceptions.XmlNodeTypeException.checkNotNull(element);
        if (element.nodeType == node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
          this.insertAll(index, this[_expandFragment](element));
        } else {
          exceptions.XmlNodeTypeException.checkValidType(element, this[_nodeTypes]);
          exceptions.XmlParentException.checkNoParent(element);
          super.insert(index, element);
          element.attachParent(this[_parent$]);
        }
      }
      insertAll(index, iterable) {
        IterableLOfEL().as(iterable);
        let expanded = this[_expandNodes](iterable);
        super.insertAll(index, expanded);
        for (let node of expanded) {
          node.attachParent(this[_parent$]);
        }
      }
      removeAt(index) {
        core.RangeError.checkValidIndex(index, this);
        this._get(index).detachParent(this[_parent$]);
        return super.removeAt(index);
      }
      [_expandFragment](fragment) {
        return fragment.children[$map](EL(), dart.fn(node => {
          exceptions.XmlNodeTypeException.checkValidType(node, this[_nodeTypes]);
          return EL().as(transformer['XmlTransformerExtension|copy'](node));
        }, XmlNodeLToEL()));
      }
      [_expandNodes](iterable) {
        let expanded = JSArrayOfEL().of([]);
        for (let node of iterable) {
          exceptions.XmlNodeTypeException.checkNotNull(node);
          if (node.nodeType == node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
            expanded[$addAll](this[_expandFragment](node));
          } else {
            exceptions.XmlNodeTypeException.checkValidType(node, this[_nodeTypes]);
            exceptions.XmlParentException.checkNoParent(node);
            expanded[$add](node);
          }
        }
        return expanded;
      }
    }
    (XmlNodeList.new = function() {
      this[_parent$] = null;
      this[_nodeTypes] = null;
      XmlNodeList.__proto__.new.call(this, JSArrayOfEL().of([]));
      ;
    }).prototype = XmlNodeList.prototype;
    dart.addTypeTests(XmlNodeList);
    XmlNodeList.prototype[_is_XmlNodeList_default] = true;
    dart.addTypeCaches(XmlNodeList);
    dart.setMethodSignature(XmlNodeList, () => ({
      __proto__: dart.getMethods(XmlNodeList.__proto__),
      initialize: dart.fnType(dart.void, [dart.legacy(node.XmlNode), dart.legacy(core.Set$(dart.legacy(node_type.XmlNodeType)))]),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$removeWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$retainWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      removeRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      [$removeRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      fillRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.Object)]),
      [$fillRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.Object)]),
      setRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)], [dart.legacy(core.int)]),
      [$setRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)], [dart.legacy(core.int)]),
      replaceRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
      setAll: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$setAll]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      insert: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insert]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      insertAll: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      removeAt: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$removeAt]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [_expandFragment]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(E)]),
      [_expandNodes]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.Iterable$(dart.legacy(E)))])
    }));
    dart.setSetterSignature(XmlNodeList, () => ({
      __proto__: dart.getSetters(XmlNodeList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(XmlNodeList, I[30]);
    dart.setFieldSignature(XmlNodeList, () => ({
      __proto__: dart.getFields(XmlNodeList.__proto__),
      [_parent$]: dart.fieldType(dart.legacy(node.XmlNode)),
      [_nodeTypes]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(node_type.XmlNodeType))))
    }));
    dart.defineExtensionMethods(XmlNodeList, [
      '_set',
      'add',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'clear',
      'removeLast',
      'removeRange',
      'fillRange',
      'setRange',
      'replaceRange',
      'setAll',
      'insert',
      'insertAll',
      'removeAt'
    ]);
    dart.defineExtensionAccessors(XmlNodeList, ['length']);
    return XmlNodeList;
  });
  node_list.XmlNodeList = node_list.XmlNodeList$();
  dart.addTypeTests(node_list.XmlNodeList, _is_XmlNodeList_default);
  name_matcher.createNameMatcher = function createNameMatcher(name, namespace) {
    if (name == null) {
      dart.throw(new core.ArgumentError.new("Illegal name matcher."));
    } else if (name === "*") {
      if (namespace == null || namespace === "*") {
        return dart.fn(named => true, T.XmlHasNameLToboolL());
      } else {
        return dart.fn(named => named.name.namespaceUri == namespace, T.XmlHasNameLToboolL());
      }
    } else {
      if (namespace == null) {
        return dart.fn(named => named.name.qualified == name, T.XmlHasNameLToboolL());
      } else if (namespace === "*") {
        return dart.fn(named => named.name.local == name, T.XmlHasNameLToboolL());
      } else {
        return dart.fn(named => named.name.local == name && named.name.namespaceUri == namespace, T.XmlHasNameLToboolL());
      }
    }
  };
  var name$1 = dart.privateName(attribute, "XmlAttribute.name");
  var attributeType$ = dart.privateName(attribute, "XmlAttribute.attributeType");
  var _name$ = dart.privateName(attribute_type, "_name");
  var _value = dart.privateName(attribute, "_value");
  const XmlNode_XmlHasParent$36$1 = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36$1.new = function() {
    has_parent.XmlHasParent$(dart.legacy(node.XmlNode))[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$1.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$1, has_parent.XmlHasParent$(dart.legacy(node.XmlNode)));
  const XmlNode_XmlHasName$36$ = class XmlNode_XmlHasName extends XmlNode_XmlHasParent$36$1 {};
  (XmlNode_XmlHasName$36$.new = function() {
    XmlNode_XmlHasName$36$.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasName$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasName$36$, has_name.XmlHasName);
  attribute.XmlAttribute = class XmlAttribute extends XmlNode_XmlHasName$36$ {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get attributeType() {
      return this[attributeType$];
    }
    set attributeType(value) {
      super.attributeType = value;
    }
    get value() {
      return this[_value];
    }
    set value(value) {
      core.ArgumentError.checkNotNull(T.StringL(), value, "value");
      this[_value] = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.ATTRIBUTE;
    }
    accept(visitor) {
      return visitor.visitAttribute(this);
    }
  };
  (attribute.XmlAttribute.new = function(name, value, attributeType = C[17] || CT.C17) {
    this[_value] = null;
    this[name$1] = name;
    this[attributeType$] = attributeType;
    attribute.XmlAttribute.__proto__.new.call(this);
    this.name.attachParent(this);
    this.value = value;
  }).prototype = attribute.XmlAttribute.prototype;
  dart.addTypeTests(attribute.XmlAttribute);
  dart.addTypeCaches(attribute.XmlAttribute);
  dart.setMethodSignature(attribute.XmlAttribute, () => ({
    __proto__: dart.getMethods(attribute.XmlAttribute.__proto__),
    accept: dart.fnType(dart.dynamic, [dart.legacy(visitor.XmlVisitor)])
  }));
  dart.setGetterSignature(attribute.XmlAttribute, () => ({
    __proto__: dart.getGetters(attribute.XmlAttribute.__proto__),
    value: dart.legacy(core.String),
    nodeType: dart.legacy(node_type.XmlNodeType)
  }));
  dart.setSetterSignature(attribute.XmlAttribute, () => ({
    __proto__: dart.getSetters(attribute.XmlAttribute.__proto__),
    value: dart.legacy(core.String)
  }));
  dart.setLibraryUri(attribute.XmlAttribute, I[31]);
  dart.setFieldSignature(attribute.XmlAttribute, () => ({
    __proto__: dart.getFields(attribute.XmlAttribute.__proto__),
    [_value]: dart.fieldType(dart.legacy(core.String)),
    name: dart.finalFieldType(dart.legacy(name$.XmlName)),
    attributeType: dart.finalFieldType(dart.legacy(attribute_type.XmlAttributeType))
  }));
  namespace$.lookupAttribute = function lookupAttribute(start, prefix, local) {
    for (let node = start; node != null; node = node.parent) {
      for (let attribute of node.attributes) {
        if (attribute.name.prefix == prefix && attribute.name.local == local) {
          return attribute;
        }
      }
    }
    return null;
  };
  namespace$.lookupNamespacePrefix = function lookupNamespacePrefix(start, uri) {
    for (let node = start; node != null; node = node.parent) {
      for (let attribute of node.attributes) {
        if (attribute.value == uri) {
          if (attribute.name.prefix === "xmlns") {
            return attribute.name.local;
          } else if (attribute.name.prefix == null && attribute.name.local === "xmlns") {
            return "";
          }
        }
      }
    }
    return null;
  };
  dart.defineLazy(namespace$, {
    /*namespace$.xml*/get xml() {
      return "xml";
    },
    /*namespace$.xmlUri*/get xmlUri() {
      return "http://www.w3.org/XML/1998/namespace";
    },
    /*namespace$.xmlns*/get xmlns() {
      return "xmlns";
    }
  }, true);
  dart.trackLibraries("packages/xml/src/xml/utils/simple_name.dart", {
    "package:xml/src/xml/utils/simple_name.dart": simple_name,
    "package:xml/src/xml/utils/prefix_name.dart": prefix_name,
    "package:xml/src/xml/mixins/has_xml.dart": has_xml,
    "package:xml/src/xml/visitors/writer.dart": writer$,
    "package:xml/src/xml/visitors/pretty_writer.dart": pretty_writer,
    "package:xml/src/xml/mixins/has_writer.dart": has_writer,
    "package:xml/src/xml/navigation/descendants.dart": descendants,
    "package:xml/src/xml/mixins/has_text.dart": has_text,
    "package:xml/src/xml/nodes/text.dart": text$,
    "package:xml/src/xml/nodes/processing.dart": processing,
    "package:xml/src/xml/nodes/document_fragment.dart": document_fragment,
    "package:xml/src/xml/utils/exceptions.dart": exceptions,
    "package:xml/src/xml/grammar.dart": grammar,
    "package:xml/src/xml/parser.dart": parser$,
    "package:xml/src/xml/nodes/element.dart": element,
    "package:xml/src/xml/mixins/has_children.dart": has_children,
    "package:xml/src/xml/nodes/document.dart": document,
    "package:xml/src/xml/nodes/doctype.dart": doctype,
    "package:xml/src/xml/nodes/declaration.dart": declaration,
    "package:xml/src/xml/nodes/data.dart": data,
    "package:xml/src/xml/nodes/comment.dart": comment,
    "package:xml/src/xml/mixins/has_visitor.dart": has_visitor,
    "package:xml/src/xml/visitors/visitor.dart": visitor,
    "package:xml/src/xml/nodes/cdata.dart": cdata,
    "package:xml/src/xml/visitors/transformer.dart": transformer,
    "package:xml/src/xml/utils/node_list.dart": node_list,
    "package:xml/src/xml/utils/name_matcher.dart": name_matcher,
    "package:xml/src/xml/mixins/has_attributes.dart": has_attributes,
    "package:xml/src/xml/nodes/node.dart": node,
    "package:xml/src/xml/mixins/has_parent.dart": has_parent,
    "package:xml/src/xml/utils/name.dart": name$,
    "package:xml/src/xml/mixins/has_name.dart": has_name,
    "package:xml/src/xml/nodes/attribute.dart": attribute,
    "package:xml/src/xml/utils/namespace.dart": namespace$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../mixins/has_writer.dart","../mixins/has_parent.dart","../mixins/has_attributes.dart","../mixins/has_children.dart","../mixins/has_text.dart","../mixins/has_xml.dart","../nodes/node.dart","name.dart","simple_name.dart","prefix_name.dart","../visitors/visitor.dart","../visitors/writer.dart","../visitors/pretty_writer.dart","../navigation/descendants.dart","../nodes/data.dart","../nodes/text.dart","../nodes/processing.dart","../nodes/document_fragment.dart","exceptions.dart","../grammar.dart","../parser.dart","../nodes/element.dart","../nodes/document.dart","../nodes/doctype.dart","../nodes/declaration.dart","../nodes/comment.dart","../nodes/cdata.dart","../visitors/transformer.dart","node_list.dart","name_matcher.dart","../nodes/attribute.dart","namespace.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/xml/src/xml/utils/simple_name.dart.lib.js"}');
  // Exports:
  return {
    src__xml__utils__simple_name: simple_name,
    src__xml__utils__prefix_name: prefix_name,
    src__xml__mixins__has_xml: has_xml,
    src__xml__visitors__writer: writer$,
    src__xml__visitors__pretty_writer: pretty_writer,
    src__xml__mixins__has_writer: has_writer,
    src__xml__navigation__descendants: descendants,
    src__xml__mixins__has_text: has_text,
    src__xml__nodes__text: text$,
    src__xml__nodes__processing: processing,
    src__xml__nodes__document_fragment: document_fragment,
    src__xml__utils__exceptions: exceptions,
    src__xml__grammar: grammar,
    src__xml__parser: parser$,
    src__xml__nodes__element: element,
    src__xml__mixins__has_children: has_children,
    src__xml__nodes__document: document,
    src__xml__nodes__doctype: doctype,
    src__xml__nodes__declaration: declaration,
    src__xml__nodes__data: data,
    src__xml__nodes__comment: comment,
    src__xml__mixins__has_visitor: has_visitor,
    src__xml__visitors__visitor: visitor,
    src__xml__nodes__cdata: cdata,
    src__xml__visitors__transformer: transformer,
    src__xml__utils__node_list: node_list,
    src__xml__utils__name_matcher: name_matcher,
    src__xml__mixins__has_attributes: has_attributes,
    src__xml__nodes__node: node,
    src__xml__mixins__has_parent: has_parent,
    src__xml__utils__name: name$,
    src__xml__mixins__has_name: has_name,
    src__xml__nodes__attribute: attribute,
    src__xml__utils__namespace: namespace$
  };
}));

//# sourceMappingURL=simple_name.dart.lib.js.map
