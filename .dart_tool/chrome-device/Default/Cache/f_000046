define(['dart_sdk', 'packages/get/get_rx/src/rx_stream/rx_stream.dart'], (function load__packages__get__get_rx__src__rx_types__rx_types_dart(dart_sdk, packages__get__get_rx__src__rx_stream__rx_stream$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const rx_stream = packages__get__get_rx__src__rx_stream__rx_stream$46dart.get_rx__src__rx_stream__rx_stream;
  var rx_types = Object.create(dart.library);
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $containsKey = dartx.containsKey;
  var $forEach = dartx.forEach;
  var $clear = dartx.clear;
  var $_equals = dartx._equals;
  var $compareTo = dartx.compareTo;
  var $endsWith = dartx.endsWith;
  var $startsWith = dartx.startsWith;
  var $indexOf = dartx.indexOf;
  var $lastIndexOf = dartx.lastIndexOf;
  var $isEmpty = dartx.isEmpty;
  var $substring = dartx.substring;
  var $trim = dartx.trim;
  var $trimLeft = dartx.trimLeft;
  var $trimRight = dartx.trimRight;
  var $padLeft = dartx.padLeft;
  var $padRight = dartx.padRight;
  var $contains = dartx.contains;
  var $replaceAll = dartx.replaceAll;
  var $split = dartx.split;
  var $codeUnits = dartx.codeUnits;
  var $runes = dartx.runes;
  var $toLowerCase = dartx.toLowerCase;
  var $toUpperCase = dartx.toUpperCase;
  var $allMatches = dartx.allMatches;
  var $matchAsPrefix = dartx.matchAsPrefix;
  var $modulo = dartx['%'];
  var $truncate = dartx.truncate;
  var $remainder = dartx.remainder;
  var $isNaN = dartx.isNaN;
  var $isNegative = dartx.isNegative;
  var $isInfinite = dartx.isInfinite;
  var $isFinite = dartx.isFinite;
  var $abs = dartx.abs;
  var $sign = dartx.sign;
  var $round = dartx.round;
  var $floor = dartx.floor;
  var $ceil = dartx.ceil;
  var $roundToDouble = dartx.roundToDouble;
  var $floorToDouble = dartx.floorToDouble;
  var $ceilToDouble = dartx.ceilToDouble;
  var $truncateToDouble = dartx.truncateToDouble;
  var $clamp = dartx.clamp;
  var $toInt = dartx.toInt;
  var $toDouble = dartx.toDouble;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $toStringAsExponential = dartx.toStringAsExponential;
  var $toStringAsPrecision = dartx.toStringAsPrecision;
  var $leftShift = dartx['<<'];
  var $rightShift = dartx['>>'];
  var $modPow = dartx.modPow;
  var $modInverse = dartx.modInverse;
  var $gcd = dartx.gcd;
  var $isEven = dartx.isEven;
  var $isOdd = dartx.isOdd;
  var $bitLength = dartx.bitLength;
  var $toUnsigned = dartx.toUnsigned;
  var $toSigned = dartx.toSigned;
  var $iterator = dartx.iterator;
  var $addAll = dartx.addAll;
  var $length = dartx.length;
  var $insertAll = dartx.insertAll;
  var $reversed = dartx.reversed;
  var $where = dartx.where;
  var $whereType = dartx.whereType;
  var $sort = dartx.sort;
  var $plus = dartx['+'];
  var $toSet = dartx.toSet;
  var $keys = dartx.keys;
  var $remove = dartx.remove;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    JSArrayOfStreamSubscription: () => (T$.JSArrayOfStreamSubscription = dart.constFn(_interceptors.JSArray$(async.StreamSubscription)))(),
    ListOfStreamSubscription: () => (T$.ListOfStreamSubscription = dart.constFn(core.List$(async.StreamSubscription)))(),
    LinkedMapOfGetStream$ListOfStreamSubscription: () => (T$.LinkedMapOfGetStream$ListOfStreamSubscription = dart.constFn(_js_helper.LinkedMap$(rx_stream.GetStream, T$.ListOfStreamSubscription())))(),
    GetStreamAndListOfStreamSubscriptionTovoid: () => (T$.GetStreamAndListOfStreamSubscriptionTovoid = dart.constFn(dart.fnType(dart.void, [rx_stream.GetStream, T$.ListOfStreamSubscription()])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], dart.legacy(dart.Never));
    },
    get C1() {
      return C[1] = dart.constSet(dart.legacy(dart.Never), []);
    },
    get C2() {
      return C[2] = dart.constMap(dart.legacy(dart.Never), dart.legacy(dart.Never), []);
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/get-4.0.0-nullsafety.2/lib/get_rx/src/rx_types/rx_core/rx_impl.dart",
    "package:get/get_rx/src/rx_types/rx_types.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/get-4.0.0-nullsafety.2/lib/get_rx/src/rx_types/rx_core/rx_num.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/get-4.0.0-nullsafety.2/lib/get_rx/src/rx_types/rx_iterables/rx_list.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/get-4.0.0-nullsafety.2/lib/get_rx/src/rx_types/rx_iterables/rx_set.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/get-4.0.0-nullsafety.2/lib/get_rx/src/rx_types/rx_iterables/rx_map.dart"
  ];
  var _$35RxObjectMixin$35_value = dart.privateName(rx_types, "RxObjectMixin._#RxObjectMixin#_value");
  var _$35RxObjectMixin$35_value$35isSet = dart.privateName(rx_types, "RxObjectMixin._#RxObjectMixin#_value#isSet");
  var firstRebuild = dart.privateName(rx_types, "RxObjectMixin.firstRebuild");
  var __RxObjectMixin__value = dart.privateName(rx_types, "_#RxObjectMixin#_value");
  var __RxObjectMixin__value_isSet = dart.privateName(rx_types, "_#RxObjectMixin#_value#isSet");
  var _value = dart.privateName(rx_types, "_value");
  var _subscriptions = dart.privateName(rx_types, "_subscriptions");
  var subject = dart.privateName(rx_types, "NotifyManager.subject");
  var _subscriptions$ = dart.privateName(rx_types, "NotifyManager._subscriptions");
  const _is_NotifyManager_default = Symbol('_is_NotifyManager_default');
  rx_types.NotifyManager$ = dart.generic(T => {
    var GetStreamOfT = () => (GetStreamOfT = dart.constFn(rx_stream.GetStream$(T)))();
    class NotifyManager extends core.Object {}
    NotifyManager[dart.mixinOn] = Object => class NotifyManager extends Object {
      get subject() {
        return this[subject];
      }
      set subject(value) {
        this[subject] = GetStreamOfT().as(value);
      }
      get [_subscriptions]() {
        return this[_subscriptions$];
      }
      set [_subscriptions](value) {
        super[_subscriptions] = value;
      }
      get canUpdate() {
        return this[_subscriptions][$isNotEmpty];
      }
      addListener(rxGetx) {
        let t4, t3, t2, t1;
        GetStreamOfT().as(rxGetx);
        if (rxGetx == null) dart.nullFailed(I[0], 135, 33, "rxGetx");
        if (!dart.test(this[_subscriptions][$containsKey](rxGetx))) {
          let subs = rxGetx.listen(dart.bind(this.subject, 'add'));
          let listSubscriptions = (t1 = this[_subscriptions], t2 = rxGetx, t3 = t1[$_get](t2), t3 == null ? (t4 = T$.JSArrayOfStreamSubscription().of([]), t1[$_set](t2, t4), t4) : t3);
          listSubscriptions[$add](subs);
        }
      }
      listen(onData, opts) {
        if (onData == null) dart.nullFailed(I[0], 145, 22, "onData");
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return this.subject.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      close() {
        this[_subscriptions][$forEach](dart.fn((getStream, _subscriptions) => {
          if (getStream == null) dart.nullFailed(I[0], 155, 29, "getStream");
          if (_subscriptions == null) dart.nullFailed(I[0], 155, 40, "_subscriptions");
          for (let subscription of _subscriptions) {
            subscription.cancel();
          }
        }, T$.GetStreamAndListOfStreamSubscriptionTovoid()));
        this[_subscriptions][$clear]();
        this.subject.close();
      }
    };
    (NotifyManager[dart.mixinNew] = function() {
      this[subject] = new (GetStreamOfT()).new();
      this[_subscriptions$] = new (T$.LinkedMapOfGetStream$ListOfStreamSubscription()).new();
    }).prototype = NotifyManager.prototype;
    dart.addTypeTests(NotifyManager);
    NotifyManager.prototype[_is_NotifyManager_default] = true;
    dart.addTypeCaches(NotifyManager);
    NotifyManager[dart.implements] = () => [core.Object];
    dart.setMethodSignature(NotifyManager, () => ({
      __proto__: dart.getMethods(NotifyManager.__proto__),
      addListener: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(NotifyManager, () => ({
      __proto__: dart.getGetters(NotifyManager.__proto__),
      canUpdate: core.bool
    }));
    dart.setLibraryUri(NotifyManager, I[1]);
    dart.setFieldSignature(NotifyManager, () => ({
      __proto__: dart.getFields(NotifyManager.__proto__),
      subject: dart.fieldType(rx_stream.GetStream$(T)),
      [_subscriptions]: dart.finalFieldType(core.Map$(rx_stream.GetStream, core.List$(async.StreamSubscription)))
    }));
    return NotifyManager;
  });
  rx_types.NotifyManager = rx_types.NotifyManager$();
  dart.addTypeTests(rx_types.NotifyManager, _is_NotifyManager_default);
  const _is_RxObjectMixin_default = Symbol('_is_RxObjectMixin_default');
  rx_types.RxObjectMixin$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var RxObjectMixinOfT = () => (RxObjectMixinOfT = dart.constFn(rx_types.RxObjectMixin$(T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class RxObjectMixin extends rx_types.NotifyManager$(T) {}
    RxObjectMixin[dart.mixinOn] = NotifyManager => {
      class RxObjectMixin extends NotifyManager {
        get [__RxObjectMixin__value]() {
          return this[_$35RxObjectMixin$35_value];
        }
        set [__RxObjectMixin__value](value) {
          this[_$35RxObjectMixin$35_value] = value;
        }
        get [__RxObjectMixin__value_isSet]() {
          return this[_$35RxObjectMixin$35_value$35isSet];
        }
        set [__RxObjectMixin__value_isSet](value) {
          this[_$35RxObjectMixin$35_value$35isSet] = value;
        }
        get firstRebuild() {
          return this[firstRebuild];
        }
        set firstRebuild(value) {
          this[firstRebuild] = value;
        }
        get [_value]() {
          let t0;
          return dart.test(this[__RxObjectMixin__value_isSet]) ? (t0 = this[__RxObjectMixin__value], t0) : dart.throw(new _internal.LateError.fieldNI("_value"));
        }
        set [_value](t0) {
          this[__RxObjectMixin__value_isSet] = true;
          this[__RxObjectMixin__value] = t0;
        }
        refresh() {
          this.subject.add(this.value);
        }
        call(v = null) {
          TN().as(v);
          if (v != null) {
            this.value = v;
          }
          return this.value;
        }
        get string() {
          return dart.toString(this.value);
        }
        toString() {
          return dart.toString(this.value);
        }
        toJson() {
          return this.value;
        }
        _equals(o) {
          if (o == null) return false;
          if (T.is(o)) return dart.equals(this.value, o);
          if (RxObjectMixinOfT().is(o)) return dart.equals(this.value, o.value);
          return false;
        }
        get hashCode() {
          return dart.hashCode(this[_value]);
        }
        set value(val) {
          T.as(val);
          if (dart.equals(this[_value], val) && !dart.test(this.firstRebuild)) return;
          this.firstRebuild = false;
          this[_value] = val;
          this.subject.add(this[_value]);
        }
        get value() {
          if (rx_types.RxInterface.proxy != null) {
            dart.nullCheck(rx_types.RxInterface.proxy).addListener(this.subject);
          }
          return this[_value];
        }
        get stream() {
          return this.subject.stream;
        }
        bindStream(stream) {
          let t4, t3, t2, t1;
          StreamOfT().as(stream);
          if (stream == null) dart.nullFailed(I[0], 118, 29, "stream");
          let listSubscriptions = (t1 = this[_subscriptions], t2 = this.subject, t3 = t1[$_get](t2), t3 == null ? (t4 = T$.JSArrayOfStreamSubscription().of([]), t1[$_set](t2, t4), t4) : t3);
          listSubscriptions[$add](stream.listen(dart.fn(va => this.value = va, TTovoid())));
        }
      }
      dart.defineExtensionMethods(RxObjectMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(RxObjectMixin, ['hashCode']);
      return RxObjectMixin;
    };
    (RxObjectMixin[dart.mixinNew] = function() {
      this[_$35RxObjectMixin$35_value] = null;
      this[_$35RxObjectMixin$35_value$35isSet] = false;
      this[firstRebuild] = true;
    }).prototype = RxObjectMixin.prototype;
    dart.addTypeTests(RxObjectMixin);
    RxObjectMixin.prototype[_is_RxObjectMixin_default] = true;
    dart.addTypeCaches(RxObjectMixin);
    RxObjectMixin[dart.implements] = () => [rx_types.NotifyManager$(T)];
    dart.setMethodSignature(RxObjectMixin, () => ({
      __proto__: dart.getMethods(RxObjectMixin.__proto__),
      refresh: dart.fnType(dart.void, []),
      call: dart.fnType(T, [], [dart.nullable(core.Object)]),
      toJson: dart.fnType(dart.dynamic, []),
      _equals: dart.fnType(core.bool, [dart.dynamic]),
      [$_equals]: dart.fnType(core.bool, [dart.dynamic]),
      bindStream: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RxObjectMixin, () => ({
      __proto__: dart.getGetters(RxObjectMixin.__proto__),
      [_value]: T,
      string: core.String,
      value: T,
      stream: async.Stream$(dart.nullable(T))
    }));
    dart.setSetterSignature(RxObjectMixin, () => ({
      __proto__: dart.getSetters(RxObjectMixin.__proto__),
      [_value]: T,
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RxObjectMixin, I[1]);
    dart.setFieldSignature(RxObjectMixin, () => ({
      __proto__: dart.getFields(RxObjectMixin.__proto__),
      [__RxObjectMixin__value]: dart.fieldType(dart.nullable(T)),
      [__RxObjectMixin__value_isSet]: dart.fieldType(core.bool),
      firstRebuild: dart.fieldType(core.bool)
    }));
    return RxObjectMixin;
  });
  rx_types.RxObjectMixin = rx_types.RxObjectMixin$();
  dart.addTypeTests(rx_types.RxObjectMixin, _is_RxObjectMixin_default);
  const _is_RxInterface_default = Symbol('_is_RxInterface_default');
  rx_types.RxInterface$ = dart.generic(T => {
    class RxInterface extends core.Object {}
    (RxInterface.new = function() {
      ;
    }).prototype = RxInterface.prototype;
    dart.addTypeTests(RxInterface);
    RxInterface.prototype[_is_RxInterface_default] = true;
    dart.addTypeCaches(RxInterface);
    dart.setLibraryUri(RxInterface, I[1]);
    return RxInterface;
  });
  rx_types.RxInterface = rx_types.RxInterface$();
  dart.defineLazy(rx_types.RxInterface, {
    /*rx_types.RxInterface.proxy*/get proxy() {
      return null;
    },
    set proxy(_) {}
  }, false);
  dart.addTypeTests(rx_types.RxInterface, _is_RxInterface_default);
  const _is_RxNotifier_default = Symbol('_is_RxNotifier_default');
  rx_types.RxNotifier$ = dart.generic(T => {
    var GetStreamOfT = () => (GetStreamOfT = dart.constFn(rx_stream.GetStream$(T)))();
    const RxInterface_NotifyManager$36 = class RxInterface_NotifyManager extends rx_types.RxInterface$(T) {};
    (RxInterface_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(T)[dart.mixinNew].call(this);
    }).prototype = RxInterface_NotifyManager$36.prototype;
    dart.applyMixin(RxInterface_NotifyManager$36, rx_types.NotifyManager$(T));
    class RxNotifier extends RxInterface_NotifyManager$36 {
      get subject() {
        return super.subject;
      }
      set subject(value) {
        GetStreamOfT().as(value);
        if (value == null) dart.nullFailed(I[0], 125, 7, "value");
        return super.subject = value;
      }
      get [_subscriptions]() {
        return super[_subscriptions];
      }
      get canUpdate() {
        return super.canUpdate;
      }
      addListener(rxGetx) {
        GetStreamOfT().as(rxGetx);
        if (rxGetx == null) dart.nullFailed(I[0], 125, 7, "rxGetx");
        return super.addListener(rxGetx);
      }
      listen(onData, opts) {
        if (onData == null) dart.nullFailed(I[0], 125, 7, "onData");
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return super.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      close() {
        return super.close();
      }
    }
    (RxNotifier.new = function() {
      RxNotifier.__proto__.new.call(this);
      ;
    }).prototype = RxNotifier.prototype;
    dart.addTypeTests(RxNotifier);
    RxNotifier.prototype[_is_RxNotifier_default] = true;
    dart.addTypeCaches(RxNotifier);
    dart.setMethodSignature(RxNotifier, () => ({
      __proto__: dart.getMethods(RxNotifier.__proto__),
      addListener: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RxNotifier, () => ({
      __proto__: dart.getGetters(RxNotifier.__proto__),
      subject: rx_stream.GetStream$(T),
      [_subscriptions]: core.Map$(rx_stream.GetStream, core.List$(async.StreamSubscription)),
      canUpdate: core.bool
    }));
    dart.setSetterSignature(RxNotifier, () => ({
      __proto__: dart.getSetters(RxNotifier.__proto__),
      subject: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RxNotifier, I[1]);
    return RxNotifier;
  });
  rx_types.RxNotifier = rx_types.RxNotifier$();
  dart.addTypeTests(rx_types.RxNotifier, _is_RxNotifier_default);
  const _is__RxImpl_default = Symbol('_is__RxImpl_default');
  rx_types._RxImpl$ = dart.generic(T => {
    const RxNotifier_RxObjectMixin$36 = class RxNotifier_RxObjectMixin extends rx_types.RxNotifier$(T) {};
    (RxNotifier_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(T)[dart.mixinNew].call(this);
      RxNotifier_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = RxNotifier_RxObjectMixin$36.prototype;
    dart.applyMixin(RxNotifier_RxObjectMixin$36, rx_types.RxObjectMixin$(T));
    class _RxImpl extends RxNotifier_RxObjectMixin$36 {
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[0], 172, 24, "error");
        this.subject.addError(error, stackTrace);
      }
      map(R, mapper) {
        if (mapper == null) dart.nullFailed(I[0], 176, 22, "mapper");
        return this.stream.map(R, mapper);
      }
      update(fn) {
        if (fn == null) dart.nullFailed(I[0], 198, 20, "fn");
        fn(this[_value]);
        this.subject.add(this[_value]);
      }
    }
    (_RxImpl.new = function(initial) {
      _RxImpl.__proto__.new.call(this);
      this[_value] = initial;
    }).prototype = _RxImpl.prototype;
    dart.addTypeTests(_RxImpl);
    _RxImpl.prototype[_is__RxImpl_default] = true;
    dart.addTypeCaches(_RxImpl);
    dart.setMethodSignature(_RxImpl, () => ({
      __proto__: dart.getMethods(_RxImpl.__proto__),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      map: dart.gFnType(R => [async.Stream$(R), [dart.fnType(R, [dart.nullable(T)])]], R => [dart.nullable(core.Object)]),
      update: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(T)])])
    }));
    dart.setLibraryUri(_RxImpl, I[1]);
    return _RxImpl;
  });
  rx_types._RxImpl = rx_types._RxImpl$();
  dart.addTypeTests(rx_types._RxImpl, _is__RxImpl_default);
  rx_types.RxBool = class RxBool extends rx_types._RxImpl$(dart.nullable(core.bool)) {
    get isTrue() {
      return this.value;
    }
    get isFalse() {
      return !dart.nullCheck(this.isTrue);
    }
    ['&'](other) {
      if (other == null) dart.nullFailed(I[0], 212, 24, "other");
      return dart.test(other) && dart.nullCheck(this.value);
    }
    ['|'](other) {
      if (other == null) dart.nullFailed(I[0], 214, 24, "other");
      return dart.test(other) || dart.nullCheck(this.value);
    }
    ['^'](other) {
      if (other == null) dart.nullFailed(I[0], 216, 24, "other");
      return !dart.test(other) === this.value;
    }
    toggle() {
      this.subject.add(this[_value] = !dart.nullCheck(this[_value]));
      return this;
    }
    toString() {
      return dart.nullCheck(this.value) ? "true" : "false";
    }
  };
  (rx_types.RxBool.new = function(initial = null) {
    rx_types.RxBool.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxBool.prototype;
  dart.addTypeTests(rx_types.RxBool);
  dart.addTypeCaches(rx_types.RxBool);
  dart.setMethodSignature(rx_types.RxBool, () => ({
    __proto__: dart.getMethods(rx_types.RxBool.__proto__),
    '&': dart.fnType(core.bool, [core.bool]),
    '|': dart.fnType(core.bool, [core.bool]),
    '^': dart.fnType(core.bool, [core.bool]),
    toggle: dart.fnType(rx_types.RxBool, [])
  }));
  dart.setGetterSignature(rx_types.RxBool, () => ({
    __proto__: dart.getGetters(rx_types.RxBool.__proto__),
    isTrue: dart.nullable(core.bool),
    isFalse: core.bool
  }));
  dart.setLibraryUri(rx_types.RxBool, I[1]);
  dart.defineExtensionMethods(rx_types.RxBool, ['toString']);
  rx_types.RxString = class RxString extends rx_types._RxImpl$(dart.nullable(core.String)) {
    ['+'](val) {
      if (val == null) dart.nullFailed(I[0], 238, 28, "val");
      return dart.nullCheck(this[_value]) + dart.notNull(val);
    }
    compareTo(other) {
      core.String.as(other);
      if (other == null) dart.nullFailed(I[0], 242, 24, "other");
      return dart.nullCheck(this.value)[$compareTo](other);
    }
    endsWith(other) {
      if (other == null) dart.nullFailed(I[0], 249, 24, "other");
      return dart.nullCheck(this.value)[$endsWith](other);
    }
    startsWith(pattern, index = 0) {
      if (pattern == null) dart.nullFailed(I[0], 254, 27, "pattern");
      if (index == null) dart.nullFailed(I[0], 254, 41, "index");
      return dart.nullCheck(this.value)[$startsWith](pattern, index);
    }
    indexOf(pattern, start = 0) {
      if (pattern == null) dart.nullFailed(I[0], 259, 23, "pattern");
      if (start == null) dart.nullFailed(I[0], 259, 37, "start");
      return dart.nullCheck(this.value)[$indexOf](pattern, start);
    }
    lastIndexOf(pattern, start = null) {
      if (pattern == null) dart.nullFailed(I[0], 265, 27, "pattern");
      return dart.nullCheck(this.value)[$lastIndexOf](pattern, start);
    }
    get isEmpty() {
      return dart.nullCheck(this.value)[$isEmpty];
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    substring(startIndex, endIndex = null) {
      if (startIndex == null) dart.nullFailed(I[0], 277, 24, "startIndex");
      return dart.nullCheck(this.value)[$substring](startIndex, endIndex);
    }
    trim() {
      return dart.nullCheck(this.value)[$trim]();
    }
    trimLeft() {
      return dart.nullCheck(this.value)[$trimLeft]();
    }
    trimRight() {
      return dart.nullCheck(this.value)[$trimRight]();
    }
    padLeft(width, padding = " ") {
      if (width == null) dart.nullFailed(I[0], 304, 22, "width");
      if (padding == null) dart.nullFailed(I[0], 304, 37, "padding");
      return dart.nullCheck(this.value)[$padLeft](width, padding);
    }
    padRight(width, padding = " ") {
      if (width == null) dart.nullFailed(I[0], 312, 23, "width");
      if (padding == null) dart.nullFailed(I[0], 312, 38, "padding");
      return dart.nullCheck(this.value)[$padRight](width, padding);
    }
    contains(other, startIndex = 0) {
      if (other == null) dart.nullFailed(I[0], 317, 25, "other");
      if (startIndex == null) dart.nullFailed(I[0], 317, 37, "startIndex");
      return dart.nullCheck(this.value)[$contains](other, startIndex);
    }
    replaceAll(from, replace) {
      if (from == null) dart.nullFailed(I[0], 322, 29, "from");
      if (replace == null) dart.nullFailed(I[0], 322, 42, "replace");
      return dart.nullCheck(this.value)[$replaceAll](from, replace);
    }
    split(pattern) {
      if (pattern == null) dart.nullFailed(I[0], 328, 30, "pattern");
      return dart.nullCheck(this.value)[$split](pattern);
    }
    get codeUnits() {
      return dart.nullCheck(this.value)[$codeUnits];
    }
    get runes() {
      return dart.nullCheck(this.value)[$runes];
    }
    toLowerCase() {
      return dart.nullCheck(this.value)[$toLowerCase]();
    }
    toUpperCase() {
      return dart.nullCheck(this.value)[$toUpperCase]();
    }
    allMatches(string, start = 0) {
      if (string == null) dart.nullFailed(I[0], 355, 37, "string");
      if (start == null) dart.nullFailed(I[0], 355, 50, "start");
      return dart.nullCheck(this.value)[$allMatches](string, start);
    }
    matchAsPrefix(string, start = 0) {
      if (string == null) dart.nullFailed(I[0], 360, 31, "string");
      if (start == null) dart.nullFailed(I[0], 360, 44, "start");
      return dart.nullCheck(this.value)[$matchAsPrefix](string, start);
    }
  };
  (rx_types.RxString.new = function(initial = null) {
    rx_types.RxString.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxString.prototype;
  dart.addTypeTests(rx_types.RxString);
  dart.addTypeCaches(rx_types.RxString);
  rx_types.RxString[dart.implements] = () => [core.Comparable$(core.String), core.Pattern];
  dart.setMethodSignature(rx_types.RxString, () => ({
    __proto__: dart.getMethods(rx_types.RxString.__proto__),
    '+': dart.fnType(core.String, [core.String]),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
    endsWith: dart.fnType(core.bool, [core.String]),
    startsWith: dart.fnType(core.bool, [core.Pattern], [core.int]),
    indexOf: dart.fnType(core.int, [core.Pattern], [core.int]),
    lastIndexOf: dart.fnType(core.int, [core.Pattern], [dart.nullable(core.int)]),
    substring: dart.fnType(core.String, [core.int], [dart.nullable(core.int)]),
    trim: dart.fnType(core.String, []),
    trimLeft: dart.fnType(core.String, []),
    trimRight: dart.fnType(core.String, []),
    padLeft: dart.fnType(core.String, [core.int], [core.String]),
    padRight: dart.fnType(core.String, [core.int], [core.String]),
    contains: dart.fnType(core.bool, [core.Pattern], [core.int]),
    replaceAll: dart.fnType(core.String, [core.Pattern, core.String]),
    split: dart.fnType(core.List$(core.String), [core.Pattern]),
    toLowerCase: dart.fnType(core.String, []),
    toUpperCase: dart.fnType(core.String, []),
    allMatches: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    [$allMatches]: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    matchAsPrefix: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    [$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int])
  }));
  dart.setGetterSignature(rx_types.RxString, () => ({
    __proto__: dart.getGetters(rx_types.RxString.__proto__),
    isEmpty: core.bool,
    isNotEmpty: core.bool,
    codeUnits: core.List$(core.int),
    runes: core.Runes
  }));
  dart.setLibraryUri(rx_types.RxString, I[1]);
  dart.defineExtensionMethods(rx_types.RxString, ['compareTo', 'allMatches', 'matchAsPrefix']);
  const _is_Rx_default = Symbol('_is_Rx_default');
  rx_types.Rx$ = dart.generic(T => {
    class Rx extends rx_types._RxImpl$(dart.nullable(T)) {
      toJson() {
        let t1;
        try {
          t1 = this.value;
          return t1 == null ? null : dart.dsend(t1, 'toJson', []);
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Exception.is(_)) {
            dart.throw(dart.str(dart.wrapType(T)) + " has not method [toJson]");
          } else
            throw e;
        }
      }
    }
    (Rx.new = function(initial = null) {
      Rx.__proto__.new.call(this, initial);
      ;
    }).prototype = Rx.prototype;
    dart.addTypeTests(Rx);
    Rx.prototype[_is_Rx_default] = true;
    dart.addTypeCaches(Rx);
    dart.setLibraryUri(Rx, I[1]);
    return Rx;
  });
  rx_types.Rx = rx_types.Rx$();
  dart.addTypeTests(rx_types.Rx, _is_Rx_default);
  const _is__BaseRxNum_default = Symbol('_is__BaseRxNum_default');
  rx_types._BaseRxNum$ = dart.generic(T => {
    class _BaseRxNum extends rx_types._RxImpl$(T) {
      ['*'](other) {
        if (other == null) dart.nullFailed(I[2], 10, 22, "other");
        return dart.nullCheck(this.value) * dart.notNull(other);
      }
      ['%'](other) {
        if (other == null) dart.nullFailed(I[2], 25, 22, "other");
        return dart.nullCheck(this.value)[$modulo](other);
      }
      ['/'](other) {
        if (other == null) dart.nullFailed(I[2], 28, 25, "other");
        return dart.nullCheck(this.value) / dart.notNull(other);
      }
      ['~/'](other) {
        if (other == null) dart.nullFailed(I[2], 37, 23, "other");
        return (dart.nullCheck(this.value) / dart.notNull(other))[$truncate]();
      }
      _negate() {
        return -dart.nullCheck(this.value);
      }
      remainder(other) {
        if (other == null) dart.nullFailed(I[2], 48, 21, "other");
        return dart.nullCheck(this.value)[$remainder](other);
      }
      ['<'](other) {
        if (other == null) dart.nullFailed(I[2], 51, 23, "other");
        return dart.nullCheck(this.value) < dart.notNull(other);
      }
      ['<='](other) {
        if (other == null) dart.nullFailed(I[2], 54, 24, "other");
        return dart.nullCheck(this.value) <= dart.notNull(other);
      }
      ['>'](other) {
        if (other == null) dart.nullFailed(I[2], 57, 23, "other");
        return dart.nullCheck(this.value) > dart.notNull(other);
      }
      ['>='](other) {
        if (other == null) dart.nullFailed(I[2], 60, 24, "other");
        return dart.nullCheck(this.value) >= dart.notNull(other);
      }
      get isNaN() {
        return dart.nullCheck(this.value)[$isNaN];
      }
      get isNegative() {
        return dart.nullCheck(this.value)[$isNegative];
      }
      get isInfinite() {
        return dart.nullCheck(this.value)[$isInfinite];
      }
      get isFinite() {
        return dart.nullCheck(this.value)[$isFinite];
      }
      abs() {
        return dart.nullCheck(this.value)[$abs]();
      }
      get sign() {
        return dart.nullCheck(this.value)[$sign];
      }
      round() {
        return dart.nullCheck(this.value)[$round]();
      }
      floor() {
        return dart.nullCheck(this.value)[$floor]();
      }
      ceil() {
        return dart.nullCheck(this.value)[$ceil]();
      }
      truncate() {
        return dart.nullCheck(this.value)[$truncate]();
      }
      roundToDouble() {
        return dart.nullCheck(this.value)[$roundToDouble]();
      }
      floorToDouble() {
        return dart.nullCheck(this.value)[$floorToDouble]();
      }
      ceilToDouble() {
        return dart.nullCheck(this.value)[$ceilToDouble]();
      }
      truncateToDouble() {
        return dart.nullCheck(this.value)[$truncateToDouble]();
      }
      clamp(lowerLimit, upperLimit) {
        if (lowerLimit == null) dart.nullFailed(I[2], 192, 17, "lowerLimit");
        if (upperLimit == null) dart.nullFailed(I[2], 192, 33, "upperLimit");
        return dart.nullCheck(this.value)[$clamp](lowerLimit, upperLimit);
      }
      toInt() {
        return dart.nullCheck(this.value)[$toInt]();
      }
      toDouble() {
        return dart.nullCheck(this.value)[$toDouble]();
      }
      toStringAsFixed(fractionDigits) {
        if (fractionDigits == null) dart.nullFailed(I[2], 227, 30, "fractionDigits");
        return dart.nullCheck(this.value)[$toStringAsFixed](fractionDigits);
      }
      toStringAsExponential(fractionDigits = null) {
        return dart.nullCheck(this.value)[$toStringAsExponential](fractionDigits);
      }
      toStringAsPrecision(precision) {
        if (precision == null) dart.nullFailed(I[2], 267, 34, "precision");
        return dart.nullCheck(this.value)[$toStringAsPrecision](precision);
      }
    }
    (_BaseRxNum.new = function(initial) {
      _BaseRxNum.__proto__.new.call(this, initial);
      ;
    }).prototype = _BaseRxNum.prototype;
    dart.addTypeTests(_BaseRxNum);
    _BaseRxNum.prototype[_is__BaseRxNum_default] = true;
    dart.addTypeCaches(_BaseRxNum);
    dart.setMethodSignature(_BaseRxNum, () => ({
      __proto__: dart.getMethods(_BaseRxNum.__proto__),
      '*': dart.fnType(core.num, [core.num]),
      '%': dart.fnType(core.num, [core.num]),
      '/': dart.fnType(core.double, [core.num]),
      '~/': dart.fnType(core.int, [core.num]),
      _negate: dart.fnType(core.num, []),
      remainder: dart.fnType(core.num, [core.num]),
      '<': dart.fnType(core.bool, [core.num]),
      '<=': dart.fnType(core.bool, [core.num]),
      '>': dart.fnType(core.bool, [core.num]),
      '>=': dart.fnType(core.bool, [core.num]),
      abs: dart.fnType(core.num, []),
      round: dart.fnType(core.int, []),
      floor: dart.fnType(core.int, []),
      ceil: dart.fnType(core.int, []),
      truncate: dart.fnType(core.int, []),
      roundToDouble: dart.fnType(core.double, []),
      floorToDouble: dart.fnType(core.double, []),
      ceilToDouble: dart.fnType(core.double, []),
      truncateToDouble: dart.fnType(core.double, []),
      clamp: dart.fnType(core.num, [core.num, core.num]),
      toInt: dart.fnType(core.int, []),
      toDouble: dart.fnType(core.double, []),
      toStringAsFixed: dart.fnType(core.String, [core.int]),
      toStringAsExponential: dart.fnType(core.String, [], [dart.nullable(core.int)]),
      toStringAsPrecision: dart.fnType(core.String, [core.int])
    }));
    dart.setGetterSignature(_BaseRxNum, () => ({
      __proto__: dart.getGetters(_BaseRxNum.__proto__),
      isNaN: core.bool,
      isNegative: core.bool,
      isInfinite: core.bool,
      isFinite: core.bool,
      sign: core.num
    }));
    dart.setLibraryUri(_BaseRxNum, I[1]);
    return _BaseRxNum;
  });
  rx_types._BaseRxNum = rx_types._BaseRxNum$();
  dart.addTypeTests(rx_types._BaseRxNum, _is__BaseRxNum_default);
  rx_types.RxNum = class RxNum extends rx_types._BaseRxNum$(core.num) {
    ['+'](other) {
      if (other == null) dart.nullFailed(I[2], 274, 23, "other");
      this.value = dart.notNull(this.value) + dart.notNull(other);
      return this.value;
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[2], 280, 23, "other");
      this.value = dart.notNull(this.value) - dart.notNull(other);
      return this.value;
    }
  };
  (rx_types.RxNum.new = function(initial) {
    if (initial == null) dart.nullFailed(I[2], 272, 13, "initial");
    rx_types.RxNum.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxNum.prototype;
  dart.addTypeTests(rx_types.RxNum);
  dart.addTypeCaches(rx_types.RxNum);
  dart.setMethodSignature(rx_types.RxNum, () => ({
    __proto__: dart.getMethods(rx_types.RxNum.__proto__),
    '+': dart.fnType(dart.nullable(core.num), [core.num]),
    '-': dart.fnType(dart.nullable(core.num), [core.num])
  }));
  dart.setLibraryUri(rx_types.RxNum, I[1]);
  rx_types.RxDouble = class RxDouble extends rx_types._BaseRxNum$(dart.nullable(core.double)) {
    ['+'](other) {
      if (other == null) dart.nullFailed(I[2], 290, 27, "other");
      this.value = dart.nullCheck(this.value) + dart.notNull(other);
      return this;
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[2], 296, 27, "other");
      this.value = dart.nullCheck(this.value) - dart.notNull(other);
      return this;
    }
    ['*'](other) {
      if (other == null) dart.nullFailed(I[2], 303, 25, "other");
      return dart.nullCheck(this.value) * dart.notNull(other);
    }
    ['%'](other) {
      if (other == null) dart.nullFailed(I[2], 306, 25, "other");
      return dart.nullCheck(this.value)[$modulo](other);
    }
    ['/'](other) {
      if (other == null) dart.nullFailed(I[2], 310, 25, "other");
      return dart.nullCheck(this.value) / dart.notNull(other);
    }
    ['~/'](other) {
      if (other == null) dart.nullFailed(I[2], 317, 23, "other");
      return (dart.nullCheck(this.value) / dart.notNull(other))[$truncate]();
    }
    _negate() {
      return -dart.nullCheck(this.value);
    }
    abs() {
      return dart.nullCheck(this.value)[$abs]();
    }
    get sign() {
      return dart.nullCheck(this.value)[$sign];
    }
    round() {
      return dart.nullCheck(this.value)[$round]();
    }
    floor() {
      return dart.nullCheck(this.value)[$floor]();
    }
    ceil() {
      return dart.nullCheck(this.value)[$ceil]();
    }
    truncate() {
      return dart.nullCheck(this.value)[$truncate]();
    }
    roundToDouble() {
      return dart.nullCheck(this.value)[$roundToDouble]();
    }
    floorToDouble() {
      return dart.nullCheck(this.value)[$floorToDouble]();
    }
    ceilToDouble() {
      return dart.nullCheck(this.value)[$ceilToDouble]();
    }
    truncateToDouble() {
      return dart.nullCheck(this.value)[$truncateToDouble]();
    }
  };
  (rx_types.RxDouble.new = function(initial = null) {
    rx_types.RxDouble.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxDouble.prototype;
  dart.addTypeTests(rx_types.RxDouble);
  dart.addTypeCaches(rx_types.RxDouble);
  dart.setMethodSignature(rx_types.RxDouble, () => ({
    __proto__: dart.getMethods(rx_types.RxDouble.__proto__),
    '+': dart.fnType(rx_types.RxDouble, [core.num]),
    '-': dart.fnType(rx_types.RxDouble, [core.num]),
    '*': dart.fnType(core.double, [core.num]),
    '%': dart.fnType(core.double, [core.num]),
    _negate: dart.fnType(core.double, []),
    abs: dart.fnType(core.double, [])
  }));
  dart.setGetterSignature(rx_types.RxDouble, () => ({
    __proto__: dart.getGetters(rx_types.RxDouble.__proto__),
    sign: core.double
  }));
  dart.setLibraryUri(rx_types.RxDouble, I[1]);
  rx_types.RxInt = class RxInt extends rx_types._BaseRxNum$(core.int) {
    ['+'](other) {
      if (other == null) dart.nullFailed(I[2], 415, 24, "other");
      this.value = dart.notNull(this.value) + dart.notNull(other);
      return this;
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[2], 421, 24, "other");
      this.value = dart.notNull(this.value) - dart.notNull(other);
      return this;
    }
    ['&'](other) {
      if (other == null) dart.nullFailed(I[2], 434, 22, "other");
      return (dart.notNull(this.value) & dart.notNull(other)) >>> 0;
    }
    ['|'](other) {
      if (other == null) dart.nullFailed(I[2], 444, 22, "other");
      return (dart.notNull(this.value) | dart.notNull(other)) >>> 0;
    }
    ['^'](other) {
      if (other == null) dart.nullFailed(I[2], 454, 22, "other");
      return (dart.notNull(this.value) ^ dart.notNull(other)) >>> 0;
    }
    ['~']() {
      return ~dart.notNull(this.value) >>> 0;
    }
    ['<<'](shiftAmount) {
      if (shiftAmount == null) dart.nullFailed(I[2], 474, 23, "shiftAmount");
      return this.value[$leftShift](shiftAmount);
    }
    ['>>'](shiftAmount) {
      if (shiftAmount == null) dart.nullFailed(I[2], 483, 23, "shiftAmount");
      return this.value[$rightShift](shiftAmount);
    }
    modPow(exponent, modulus) {
      if (exponent == null) dart.nullFailed(I[2], 489, 18, "exponent");
      if (modulus == null) dart.nullFailed(I[2], 489, 32, "modulus");
      return this.value[$modPow](exponent, modulus);
    }
    modInverse(modulus) {
      if (modulus == null) dart.nullFailed(I[2], 497, 22, "modulus");
      return this.value[$modInverse](modulus);
    }
    gcd(other) {
      if (other == null) dart.nullFailed(I[2], 510, 15, "other");
      return this.value[$gcd](other);
    }
    get isEven() {
      return this.value[$isEven];
    }
    get isOdd() {
      return this.value[$isOdd];
    }
    get bitLength() {
      return this.value[$bitLength];
    }
    toUnsigned(width) {
      if (width == null) dart.nullFailed(I[2], 560, 22, "width");
      return this.value[$toUnsigned](width);
    }
    toSigned(width) {
      if (width == null) dart.nullFailed(I[2], 590, 20, "width");
      return this.value[$toSigned](width);
    }
    _negate() {
      return -dart.notNull(this.value);
    }
    abs() {
      return this.value[$abs]();
    }
    get sign() {
      return this.value[$sign];
    }
    round() {
      return this.value[$round]();
    }
    floor() {
      return this.value[$floor]();
    }
    ceil() {
      return this.value[$ceil]();
    }
    truncate() {
      return this.value[$truncate]();
    }
    roundToDouble() {
      return this.value[$roundToDouble]();
    }
    floorToDouble() {
      return this.value[$floorToDouble]();
    }
    ceilToDouble() {
      return this.value[$ceilToDouble]();
    }
    truncateToDouble() {
      return this.value[$truncateToDouble]();
    }
  };
  (rx_types.RxInt.new = function(initial) {
    if (initial == null) dart.nullFailed(I[2], 412, 13, "initial");
    rx_types.RxInt.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxInt.prototype;
  dart.addTypeTests(rx_types.RxInt);
  dart.addTypeCaches(rx_types.RxInt);
  dart.setMethodSignature(rx_types.RxInt, () => ({
    __proto__: dart.getMethods(rx_types.RxInt.__proto__),
    '+': dart.fnType(rx_types.RxInt, [core.int]),
    '-': dart.fnType(rx_types.RxInt, [core.int]),
    '&': dart.fnType(core.int, [core.int]),
    '|': dart.fnType(core.int, [core.int]),
    '^': dart.fnType(core.int, [core.int]),
    '~': dart.fnType(core.int, []),
    '<<': dart.fnType(core.int, [core.int]),
    '>>': dart.fnType(core.int, [core.int]),
    modPow: dart.fnType(core.int, [core.int, core.int]),
    modInverse: dart.fnType(core.int, [core.int]),
    gcd: dart.fnType(core.int, [core.int]),
    toUnsigned: dart.fnType(core.int, [core.int]),
    toSigned: dart.fnType(core.int, [core.int]),
    _negate: dart.fnType(core.int, []),
    abs: dart.fnType(core.int, [])
  }));
  dart.setGetterSignature(rx_types.RxInt, () => ({
    __proto__: dart.getGetters(rx_types.RxInt.__proto__),
    isEven: core.bool,
    isOdd: core.bool,
    bitLength: core.int,
    sign: core.int
  }));
  dart.setLibraryUri(rx_types.RxInt, I[1]);
  const _is_RxList_default = Symbol('_is_RxList_default');
  rx_types.RxList$ = dart.generic(E => {
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    const ListMixin_NotifyManager$36 = class ListMixin_NotifyManager extends collection.ListMixin$(E) {};
    (ListMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(core.List$(E))[dart.mixinNew].call(this);
    }).prototype = ListMixin_NotifyManager$36.prototype;
    dart.applyMixin(ListMixin_NotifyManager$36, rx_types.NotifyManager$(core.List$(E)));
    const ListMixin_RxObjectMixin$36 = class ListMixin_RxObjectMixin extends ListMixin_NotifyManager$36 {};
    (ListMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(core.List$(E))[dart.mixinNew].call(this);
      ListMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = ListMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(ListMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(core.List$(E)));
    class RxList extends ListMixin_RxObjectMixin$36 {
      static filled(length, fill, opts) {
        if (length == null) dart.nullFailed(I[3], 11, 29, "length");
        let growable = opts && 'growable' in opts ? opts.growable : false;
        if (growable == null) dart.nullFailed(I[3], 11, 51, "growable");
        return new (rx_types.RxList$(E)).new(core.List$(E).filled(length, fill, {growable: growable}));
      }
      static empty(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        if (growable == null) dart.nullFailed(I[3], 15, 30, "growable");
        return new (rx_types.RxList$(E)).new(core.List$(E).empty({growable: growable}));
      }
      static from(elements, opts) {
        if (elements == null) dart.nullFailed(I[3], 20, 32, "elements");
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[3], 20, 48, "growable");
        return new (rx_types.RxList$(E)).new(core.List$(E).from(elements, {growable: growable}));
      }
      static of(elements, opts) {
        if (elements == null) dart.nullFailed(I[3], 25, 33, "elements");
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[3], 25, 49, "growable");
        return new (rx_types.RxList$(E)).new(core.List$(E).of(elements, {growable: growable}));
      }
      static generate(length, generator, opts) {
        if (length == null) dart.nullFailed(I[3], 30, 31, "length");
        if (generator == null) dart.nullFailed(I[3], 30, 41, "generator");
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[3], 31, 13, "growable");
        return new (rx_types.RxList$(E)).new(core.List$(E).generate(length, generator, {growable: growable}));
      }
      static unmodifiable(elements) {
        if (elements == null) dart.nullFailed(I[3], 36, 40, "elements");
        return new (rx_types.RxList$(E)).new(core.List$(E).unmodifiable(elements));
      }
      get iterator() {
        return this.value[$iterator];
      }
      _set(index, val$) {
        let val = val$;
        if (index == null) dart.nullFailed(I[3], 44, 25, "index");
        E.as(val);
        this[_value][$_set](index, val);
        this.refresh();
        return val$;
      }
      ['+'](val) {
        IterableOfE().as(val);
        if (val == null) dart.nullFailed(I[3], 52, 36, "val");
        this.addAll(val);
        this.refresh();
        return this;
      }
      _get(index) {
        if (index == null) dart.nullFailed(I[3], 59, 21, "index");
        return this.value[$_get](index);
      }
      add(item) {
        E.as(item);
        this[_value][$add](item);
        this.refresh();
      }
      addAll(item) {
        IterableOfE().as(item);
        if (item == null) dart.nullFailed(I[3], 70, 27, "item");
        this[_value][$addAll](item);
        this.refresh();
      }
      get length() {
        return this.value[$length];
      }
      get value() {
        if (rx_types.RxInterface.proxy != null) {
          dart.nullCheck(rx_types.RxInterface.proxy).addListener(this.subject);
        }
        return this[_value];
      }
      set value(value) {
        super.value = value;
      }
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[3], 88, 18, "newLength");
        this[_value][$length] = newLength;
        this.refresh();
      }
      insertAll(index, iterable) {
        if (index == null) dart.nullFailed(I[3], 94, 22, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[3], 94, 41, "iterable");
        this[_value][$insertAll](index, iterable);
        this.refresh();
      }
      get reversed() {
        return this.value[$reversed];
      }
      where(test) {
        if (test == null) dart.nullFailed(I[3], 103, 38, "test");
        return this.value[$where](test);
      }
      whereType(T) {
        return this.value[$whereType](T);
      }
      sort(compare = null) {
        this[_value][$sort](compare);
        this.refresh();
      }
    }
    (RxList.new = function(initial = C[0] || CT.C0) {
      if (initial == null) dart.nullFailed(I[3], 7, 19, "initial");
      RxList.__proto__.new.call(this);
      this[_value] = ListOfE().from(initial);
    }).prototype = RxList.prototype;
    dart.addTypeTests(RxList);
    RxList.prototype[_is_RxList_default] = true;
    dart.addTypeCaches(RxList);
    RxList[dart.implements] = () => [rx_types.RxInterface$(core.List$(E))];
    dart.setMethodSignature(RxList, () => ({
      __proto__: dart.getMethods(RxList.__proto__),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      '+': dart.fnType(rx_types.RxList$(E), [dart.nullable(core.Object)]),
      [$plus]: dart.fnType(rx_types.RxList$(E), [dart.nullable(core.Object)]),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RxList, () => ({
      __proto__: dart.getGetters(RxList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(RxList, () => ({
      __proto__: dart.getSetters(RxList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(RxList, I[1]);
    dart.defineExtensionMethods(RxList, [
      '_set',
      '+',
      '_get',
      'add',
      'addAll',
      'insertAll',
      'where',
      'whereType',
      'sort'
    ]);
    dart.defineExtensionAccessors(RxList, ['iterator', 'length', 'reversed']);
    return RxList;
  });
  rx_types.RxList = rx_types.RxList$();
  dart.addTypeTests(rx_types.RxList, _is_RxList_default);
  const _is_RxSet_default = Symbol('_is_RxSet_default');
  rx_types.RxSet$ = dart.generic(E => {
    var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    const SetMixin_NotifyManager$36 = class SetMixin_NotifyManager extends collection.SetMixin$(E) {};
    (SetMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(core.Set$(E))[dart.mixinNew].call(this);
    }).prototype = SetMixin_NotifyManager$36.prototype;
    dart.applyMixin(SetMixin_NotifyManager$36, rx_types.NotifyManager$(core.Set$(E)));
    const SetMixin_RxObjectMixin$36 = class SetMixin_RxObjectMixin extends SetMixin_NotifyManager$36 {};
    (SetMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(core.Set$(E))[dart.mixinNew].call(this);
      SetMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = SetMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(SetMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(core.Set$(E)));
    class RxSet extends SetMixin_RxObjectMixin$36 {
      ['+'](val) {
        SetOfE().as(val);
        if (val == null) dart.nullFailed(I[4], 12, 30, "val");
        this.addAll(val);
        this.refresh();
        return this;
      }
      update(fn) {
        if (fn == null) dart.nullFailed(I[4], 18, 20, "fn");
        fn(this.value);
        this.refresh();
      }
      get value() {
        if (rx_types.RxInterface.proxy != null) {
          dart.nullCheck(rx_types.RxInterface.proxy).addListener(this.subject);
        }
        return this[_value];
      }
      set value(val) {
        SetOfE().as(val);
        if (val == null) dart.nullFailed(I[4], 34, 20, "val");
        if (dart.equals(this[_value], val)) return;
        this[_value] = val;
        this.refresh();
      }
      add(value) {
        E.as(value);
        let val = this[_value].add(value);
        this.refresh();
        return val;
      }
      contains(element) {
        return this.value.contains(element);
      }
      get iterator() {
        return this.value.iterator;
      }
      get length() {
        return this.value[$length];
      }
      lookup(object) {
        return this.value.lookup(object);
      }
      remove(item) {
        let hasRemoved = this[_value].remove(item);
        if (dart.test(hasRemoved)) {
          this.refresh();
        }
        return hasRemoved;
      }
      toSet() {
        return this.value.toSet();
      }
      addAll(item) {
        IterableOfE().as(item);
        if (item == null) dart.nullFailed(I[4], 78, 27, "item");
        this[_value].addAll(item);
        this.refresh();
      }
      clear() {
        this[_value].clear();
        this.refresh();
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(I[4], 90, 36, "elements");
        this[_value].removeAll(elements);
        this.refresh();
      }
      retainAll(elements) {
        if (elements == null) dart.nullFailed(I[4], 96, 36, "elements");
        this[_value].retainAll(elements);
        this.refresh();
      }
      retainWhere(E) {
        if (E == null) dart.nullFailed(I[4], 102, 37, "E");
        this[_value].retainWhere(E);
        this.refresh();
      }
    }
    (RxSet.new = function(initial = C[1] || CT.C1) {
      if (initial == null) dart.nullFailed(I[4], 6, 17, "initial");
      RxSet.__proto__.new.call(this);
      this[_value] = LinkedHashSetOfE().from(initial);
    }).prototype = RxSet.prototype;
    dart.addTypeTests(RxSet);
    RxSet.prototype[_is_RxSet_default] = true;
    dart.addTypeCaches(RxSet);
    RxSet[dart.implements] = () => [rx_types.RxInterface$(core.Set$(E))];
    dart.setMethodSignature(RxSet, () => ({
      __proto__: dart.getMethods(RxSet.__proto__),
      '+': dart.fnType(rx_types.RxSet$(E), [dart.nullable(core.Object)]),
      update: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(core.Iterable$(E))])]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), [])
    }));
    dart.setGetterSignature(RxSet, () => ({
      __proto__: dart.getGetters(RxSet.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(RxSet, I[1]);
    dart.defineExtensionMethods(RxSet, ['contains', 'toSet']);
    dart.defineExtensionAccessors(RxSet, ['iterator', 'length']);
    return RxSet;
  });
  rx_types.RxSet = rx_types.RxSet$();
  dart.addTypeTests(rx_types.RxSet, _is_RxSet_default);
  const _is_RxMap_default = Symbol('_is_RxMap_default');
  rx_types.RxMap$ = dart.generic((K, V) => {
    var LinkedHashMapOfK$V = () => (LinkedHashMapOfK$V = dart.constFn(collection.LinkedHashMap$(K, V)))();
    const MapMixin_NotifyManager$36 = class MapMixin_NotifyManager extends collection.MapMixin$(K, V) {};
    (MapMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(core.Map$(K, V))[dart.mixinNew].call(this);
    }).prototype = MapMixin_NotifyManager$36.prototype;
    dart.applyMixin(MapMixin_NotifyManager$36, rx_types.NotifyManager$(core.Map$(K, V)));
    const MapMixin_RxObjectMixin$36 = class MapMixin_RxObjectMixin extends MapMixin_NotifyManager$36 {};
    (MapMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(core.Map$(K, V))[dart.mixinNew].call(this);
      MapMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = MapMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(MapMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(core.Map$(K, V)));
    class RxMap extends MapMixin_RxObjectMixin$36 {
      static from(other) {
        if (other == null) dart.nullFailed(I[5], 10, 32, "other");
        return new (rx_types.RxMap$(K, V)).new(collection.LinkedHashMap$(K, V).from(other));
      }
      static of(other) {
        if (other == null) dart.nullFailed(I[5], 15, 30, "other");
        return new (rx_types.RxMap$(K, V)).new(collection.LinkedHashMap$(K, V).of(other));
      }
      static unmodifiable(other) {
        if (other == null) dart.nullFailed(I[5], 20, 52, "other");
        return new (rx_types.RxMap$(K, V)).new(core.Map$(K, V).unmodifiable(other));
      }
      static identity() {
        return new (rx_types.RxMap$(K, V)).new(new (_js_helper.IdentityMap$(K, V)).new());
      }
      _get(key) {
        return this.value[$_get](K.as(key));
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        this[_value][$_set](key, value);
        this.refresh();
        return value$;
      }
      clear() {
        this[_value][$clear]();
        this.refresh();
      }
      get keys() {
        return this.value[$keys];
      }
      remove(key) {
        let val = this[_value][$remove](key);
        this.refresh();
        return val;
      }
      get value() {
        if (rx_types.RxInterface.proxy != null) {
          dart.nullCheck(rx_types.RxInterface.proxy).addListener(this.subject);
        }
        return this[_value];
      }
      set value(value) {
        super.value = value;
      }
    }
    (RxMap.new = function(initial = C[2] || CT.C2) {
      if (initial == null) dart.nullFailed(I[5], 6, 20, "initial");
      RxMap.__proto__.new.call(this);
      this[_value] = LinkedHashMapOfK$V().from(initial);
    }).prototype = RxMap.prototype;
    dart.addTypeTests(RxMap);
    RxMap.prototype[_is_RxMap_default] = true;
    dart.addTypeCaches(RxMap);
    RxMap[dart.implements] = () => [rx_types.RxInterface$(core.Map$(K, V))];
    dart.setMethodSignature(RxMap, () => ({
      __proto__: dart.getMethods(RxMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RxMap, () => ({
      __proto__: dart.getGetters(RxMap.__proto__),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(RxMap, I[1]);
    dart.defineExtensionMethods(RxMap, ['_get', '_set', 'clear', 'remove']);
    dart.defineExtensionAccessors(RxMap, ['keys']);
    return RxMap;
  });
  rx_types.RxMap = rx_types.RxMap$();
  dart.addTypeTests(rx_types.RxMap, _is_RxMap_default);
  rx_types['StringExtension|get#obs'] = function StringExtension$124get$35obs($this) {
    if ($this == null) dart.nullFailed(I[0], 384, 16, "#this");
    return new rx_types.RxString.new($this);
  };
  rx_types['IntExtension|get#obs'] = function IntExtension$124get$35obs($this) {
    if ($this == null) dart.nullFailed(I[0], 389, 13, "#this");
    return new rx_types.RxInt.new($this);
  };
  rx_types['DoubleExtension|get#obs'] = function DoubleExtension$124get$35obs($this) {
    if ($this == null) dart.nullFailed(I[0], 394, 16, "#this");
    return new rx_types.RxDouble.new($this);
  };
  rx_types['BoolExtension|get#obs'] = function BoolExtension$124get$35obs($this) {
    if ($this == null) dart.nullFailed(I[0], 399, 14, "#this");
    return new rx_types.RxBool.new($this);
  };
  rx_types['RxT|get#obs'] = function RxT$124get$35obs(T, $this) {
    return new (rx_types.Rx$(T)).new($this);
  };
  rx_types['ListExtension|get#obs'] = function ListExtension$124get$35obs(E, $this) {
    if ($this == null) dart.nullFailed(I[3], 120, 17, "#this");
    return new (rx_types.RxList$(E)).new($this);
  };
  rx_types['ListExtension|addNonNull'] = function ListExtension$124addNonNull(E, $this, item) {
    if ($this == null) dart.nullFailed(I[3], 123, 8, "#this");
    if (item != null) $this[$add](item);
  };
  rx_types['ListExtension|get#addNonNull'] = function ListExtension$124get$35addNonNull(E, $this) {
    if ($this == null) dart.nullFailed(I[3], 123, 8, "#this");
    return dart.fn(item => rx_types['ListExtension|addNonNull'](E, $this, item), dart.fnType(dart.void, [E]));
  };
  rx_types['ListExtension|addIf'] = function ListExtension$124addIf(E, $this, condition, item) {
    if ($this == null) dart.nullFailed(I[3], 133, 8, "#this");
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this[$add](item);
  };
  rx_types['ListExtension|get#addIf'] = function ListExtension$124get$35addIf(E, $this) {
    if ($this == null) dart.nullFailed(I[3], 133, 8, "#this");
    return dart.fn((condition, item) => rx_types['ListExtension|addIf'](E, $this, condition, item), dart.fnType(dart.void, [dart.dynamic, E]));
  };
  rx_types['ListExtension|get#addAllIf'] = function ListExtension$124get$35addAllIf(E, $this) {
    if ($this == null) dart.nullFailed(I[3], 139, 8, "#this");
    return dart.fn((condition, items) => {
      if (items == null) dart.nullFailed(I[3], 139, 48, "items");
      return rx_types['ListExtension|addAllIf'](E, $this, condition, items);
    }, dart.fnType(dart.void, [dart.dynamic, core.Iterable$(E)]));
  };
  rx_types['ListExtension|addAllIf'] = function ListExtension$124addAllIf(E, $this, condition, items) {
    if ($this == null) dart.nullFailed(I[3], 139, 8, "#this");
    if (items == null) dart.nullFailed(I[3], 139, 48, "items");
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this[$addAll](items);
  };
  rx_types['ListExtension|assign'] = function ListExtension$124assign(E, $this, item) {
    if ($this == null) dart.nullFailed(I[3], 145, 8, "#this");
    if (rx_types.RxList.is($this)) {
      rx_types.RxList.as($this)[_value];
    }
    $this[$clear]();
    $this[$add](item);
  };
  rx_types['ListExtension|get#assign'] = function ListExtension$124get$35assign(E, $this) {
    if ($this == null) dart.nullFailed(I[3], 145, 8, "#this");
    return dart.fn(item => rx_types['ListExtension|assign'](E, $this, item), dart.fnType(dart.void, [E]));
  };
  rx_types['ListExtension|assignAll'] = function ListExtension$124assignAll(E, $this, items) {
    if ($this == null) dart.nullFailed(I[3], 155, 8, "#this");
    if (items == null) dart.nullFailed(I[3], 155, 30, "items");
    if (rx_types.RxList.is($this)) {
      rx_types.RxList.as($this)[_value];
    }
    $this[$clear]();
    $this[$addAll](items);
  };
  rx_types['ListExtension|get#assignAll'] = function ListExtension$124get$35assignAll(E, $this) {
    if ($this == null) dart.nullFailed(I[3], 155, 8, "#this");
    return dart.fn(items => {
      if (items == null) dart.nullFailed(I[3], 155, 30, "items");
      return rx_types['ListExtension|assignAll'](E, $this, items);
    }, dart.fnType(dart.void, [core.Iterable$(E)]));
  };
  rx_types['MapExtension|get#obs'] = function MapExtension$124get$35obs(K, V, $this) {
    if ($this == null) dart.nullFailed(I[5], 67, 19, "#this");
    return new (rx_types.RxMap$(K, V)).new($this);
  };
  rx_types['MapExtension|get#addIf'] = function MapExtension$124get$35addIf(K, V, $this) {
    if ($this == null) dart.nullFailed(I[5], 71, 8, "#this");
    return dart.fn((condition, key, value) => rx_types['MapExtension|addIf'](K, V, $this, condition, key, value), dart.fnType(dart.void, [dart.dynamic, K, V]));
  };
  rx_types['MapExtension|addIf'] = function MapExtension$124addIf(K, V, $this, condition, key, value) {
    if ($this == null) dart.nullFailed(I[5], 71, 8, "#this");
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) {
      $this[$_set](key, value);
    }
  };
  rx_types['MapExtension|addAllIf'] = function MapExtension$124addAllIf(K, V, $this, condition, values) {
    if ($this == null) dart.nullFailed(I[5], 78, 8, "#this");
    if (values == null) dart.nullFailed(I[5], 78, 46, "values");
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this[$addAll](values);
  };
  rx_types['MapExtension|get#addAllIf'] = function MapExtension$124get$35addAllIf(K, V, $this) {
    if ($this == null) dart.nullFailed(I[5], 78, 8, "#this");
    return dart.fn((condition, values) => {
      if (values == null) dart.nullFailed(I[5], 78, 46, "values");
      return rx_types['MapExtension|addAllIf'](K, V, $this, condition, values);
    }, dart.fnType(dart.void, [dart.dynamic, core.Map$(K, V)]));
  };
  rx_types['MapExtension|get#assign'] = function MapExtension$124get$35assign(K, V, $this) {
    if ($this == null) dart.nullFailed(I[5], 83, 8, "#this");
    return dart.fn((key, val) => rx_types['MapExtension|assign'](K, V, $this, key, val), dart.fnType(dart.void, [K, V]));
  };
  rx_types['MapExtension|assign'] = function MapExtension$124assign(K, V, $this, key, val) {
    if ($this == null) dart.nullFailed(I[5], 83, 8, "#this");
    if (rx_types.RxMap.is($this)) {
      let map = rx_types.RxMap.as($this);
      map[_value];
      map[_value][$clear]();
      $this[$_set](key, val);
    } else {
      $this[$clear]();
      $this[$_set](key, val);
    }
  };
  rx_types['MapExtension|assignAll'] = function MapExtension$124assignAll(K, V, $this, val) {
    if ($this == null) dart.nullFailed(I[5], 95, 8, "#this");
    if (val == null) dart.nullFailed(I[5], 95, 28, "val");
    if (rx_types.RxMap.is(val) && rx_types.RxMap.is($this)) {
      if (dart.equals(rx_types.RxMap.as(val)[_value], rx_types.RxMap.as($this)[_value])) return;
    }
    if (rx_types.RxMap.is($this)) {
      let map = rx_types.RxMap.as($this);
      if (dart.equals(map[_value], val)) return;
      map[_value] = val;
      map.refresh();
    } else {
      if (dart.equals($this, val)) return;
      $this[$clear]();
      $this[$addAll](val);
    }
  };
  rx_types['MapExtension|get#assignAll'] = function MapExtension$124get$35assignAll(K, V, $this) {
    if ($this == null) dart.nullFailed(I[5], 95, 8, "#this");
    return dart.fn(val => {
      if (val == null) dart.nullFailed(I[5], 95, 28, "val");
      return rx_types['MapExtension|assignAll'](K, V, $this, val);
    }, dart.fnType(dart.void, [core.Map$(K, V)]));
  };
  rx_types['SetExtension|get#obs'] = function SetExtension$124get$35obs(E, $this) {
    let t28;
    if ($this == null) dart.nullFailed(I[4], 109, 16, "#this");
    t28 = new (rx_types.RxSet$(E)).new(collection.LinkedHashSet$(E).new());
    return (() => {
      t28.addAll($this);
      return t28;
    })();
  };
  rx_types['SetExtension|get#addIf'] = function SetExtension$124get$35addIf(E, $this) {
    if ($this == null) dart.nullFailed(I[4], 124, 8, "#this");
    return dart.fn((condition, item) => rx_types['SetExtension|addIf'](E, $this, condition, item), dart.fnType(dart.void, [dart.dynamic, E]));
  };
  rx_types['SetExtension|addIf'] = function SetExtension$124addIf(E, $this, condition, item) {
    if ($this == null) dart.nullFailed(I[4], 124, 8, "#this");
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this.add(item);
  };
  rx_types['SetExtension|get#addAllIf'] = function SetExtension$124get$35addAllIf(E, $this) {
    if ($this == null) dart.nullFailed(I[4], 130, 8, "#this");
    return dart.fn((condition, items) => {
      if (items == null) dart.nullFailed(I[4], 130, 48, "items");
      return rx_types['SetExtension|addAllIf'](E, $this, condition, items);
    }, dart.fnType(dart.void, [dart.dynamic, core.Iterable$(E)]));
  };
  rx_types['SetExtension|addAllIf'] = function SetExtension$124addAllIf(E, $this, condition, items) {
    if ($this == null) dart.nullFailed(I[4], 130, 8, "#this");
    if (items == null) dart.nullFailed(I[4], 130, 48, "items");
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this.addAll(items);
  };
  rx_types['SetExtension|get#assign'] = function SetExtension$124get$35assign(E, $this) {
    if ($this == null) dart.nullFailed(I[4], 136, 8, "#this");
    return dart.fn(item => rx_types['SetExtension|assign'](E, $this, item), dart.fnType(dart.void, [E]));
  };
  rx_types['SetExtension|assign'] = function SetExtension$124assign(E, $this, item) {
    if ($this == null) dart.nullFailed(I[4], 136, 8, "#this");
    if (rx_types.RxSet.is($this)) {
      rx_types.RxSet.as($this)[_value];
    }
    $this.clear();
    $this.add(item);
  };
  rx_types['SetExtension|assignAll'] = function SetExtension$124assignAll(E, $this, items) {
    if ($this == null) dart.nullFailed(I[4], 146, 8, "#this");
    if (items == null) dart.nullFailed(I[4], 146, 30, "items");
    if (rx_types.RxSet.is($this)) {
      rx_types.RxSet.as($this)[_value];
    }
    $this.clear();
    $this.addAll(items);
  };
  rx_types['SetExtension|get#assignAll'] = function SetExtension$124get$35assignAll(E, $this) {
    if ($this == null) dart.nullFailed(I[4], 146, 8, "#this");
    return dart.fn(items => {
      if (items == null) dart.nullFailed(I[4], 146, 30, "items");
      return rx_types['SetExtension|assignAll'](E, $this, items);
    }, dart.fnType(dart.void, [core.Iterable$(E)]));
  };
  dart.trackLibraries("packages/get/get_rx/src/rx_types/rx_types.dart", {
    "package:get/get_rx/src/rx_types/rx_types.dart": rx_types
  }, {
    "package:get/get_rx/src/rx_types/rx_types.dart": ["rx_core/rx_impl.dart", "rx_core/rx_interface.dart", "rx_core/rx_num.dart", "rx_iterables/rx_list.dart", "rx_iterables/rx_set.dart", "rx_iterables/rx_map.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["rx_core/rx_impl.dart","rx_core/rx_interface.dart","rx_core/rx_num.dart","rx_iterables/rx_list.dart","rx_iterables/rx_set.dart","rx_iterables/rx_map.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/get/get_rx/src/rx_types/rx_types.dart.lib.js"}');
  // Exports:
  return {
    get_rx__src__rx_types__rx_types: rx_types
  };
}));

//# sourceMappingURL=rx_types.dart.lib.js.map
